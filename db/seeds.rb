if Rails.env == "production"
  Collection.create!(name: "music", description: "Albums of music", width: 1920, height: 1280, color: "#533323", src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558926002/collections/music.jpg")
  Collection.create!(name: "movies", description: "Full feature movies", width: 1280, height: 720, color: "#000", src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559251739/collections/movies.jpg")
  Collection.create!(name: "books", description: "Published works", width: 1280, height: 853, color: "#1d1612", src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558928371/collections/books.jpg")
  return
end

Collection.create!([
  {name: "music", description: "Albums of music", src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558926002/collections/music.jpg", width: 1920, height: 1280, color: "#533323", public: true},
  {name: "movies", description: "Full feature movies", src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559251739/collections/movies.jpg", width: 1280, height: 720, color: "#000", public: true},
  {name: "books", description: "Published works", src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558928371/collections/books.jpg", width: 1280, height: 853, color: "#1d1612", public: true},
  {name: "writing", description: nil, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560213773/collections/za3ga0k2w8q8sezdh968.jpg", width: 1280, height: 853, color: "#2e2d2e", public: true}
])

User.skip_callback(:create, :after, :create_default_relationships)
User.create!([
  {username: "admin", email: "admin@email.com", password: "password", admin: true, first_name: "admin", last_name: "admin", avatar: nil, x: 0.0, y: 0.0, width: nil, height: nil, angle: 0.0, scale: 1.0, border: true, src: nil, color: nil, zindex: 0},
  {username: "test", email: "test@email.com", password: "password", admin: false, first_name: "Test", last_name: "Testerson", avatar: nil, x: 0.0, y: 0.0, width: 1200, height: 800, angle: 0.0, scale: 1.0, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558937260/users/test.jpg", color: "#396a6a", zindex: 0},
  {username: "saron", email: "saron@email.com", password: "password", admin: false, first_name: "Saron", last_name: "Yitbarek", avatar: nil, x: 0.0, y: 0.0, width: 1200, height: 853, angle: 0.0, scale: 1.0, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558937048/users/saron.jpg", color: "#584d3e", zindex: 0},
  {username: "jay", email: "jay@email.com", password: "password", admin: false, first_name: "Jay", last_name: "Wengrow", avatar: nil, x: 0.0, y: 0.0, width: nil, height: nil, angle: 0.0, scale: 1.0, border: true, src: nil, color: nil, zindex: 0},
  {username: "fay", email: "fay@email.com", password: "password", admin: false, first_name: "Fay", last_name: "Wengrow", avatar: nil, x: 0.0, y: 0.0, width: nil, height: nil, angle: 0.0, scale: 1.0, border: true, src: nil, color: nil, zindex: 0},
  {username: "ray", email: "ray@email.com", password: "password", admin: false, first_name: "Ray", last_name: "Wengrow", avatar: nil, x: 0.0, y: 0.0, width: nil, height: nil, angle: 0.0, scale: 1.0, border: true, src: nil, color: nil, zindex: 0},
  {username: "may", email: "may@email.com", password: "password", admin: false, first_name: "May", last_name: "Wengrow", avatar: nil, x: 0.0, y: 0.0, width: nil, height: nil, angle: 0.0, scale: 1.0, border: true, src: nil, color: nil, zindex: 0},
  {username: "kay", email: "kay@email.com", password: "password", admin: false, first_name: "Kay", last_name: "Wengrow", avatar: nil, x: 0.0, y: 0.0, width: nil, height: nil, angle: 0.0, scale: 1.0, border: true, src: nil, color: nil, zindex: 0},
  {username: "test2", email: "test2@email.com", password: "password", admin: false, first_name: nil, last_name: nil, avatar: nil, x: 0.0, y: 0.0, width: 640, height: 480, angle: 0.0, scale: 1.0, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558827677/placeholder.jpg", color: nil, zindex: 0},
  {username: "peter", email: "peter.x.jang@gmail.com", password: "password", admin: false, first_name: nil, last_name: nil, avatar: nil, x: 0.0, y: 0.0, width: 640, height: 480, angle: 0.0, scale: 1.0, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558827677/placeholder.jpg", color: nil, zindex: 0},
  {username: "peterxjang", email: "peter@email.com", password: "password", admin: true, first_name: "Peter", last_name: "Jang", avatar: nil, x: 0.0, y: 0.0, width: 1200, height: 800, angle: 0.0, scale: 1.0, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558929196/users/peterxjang.jpg", color: "#48474e", zindex: 0}
])
User.set_callback(:create, :after, :create_default_relationships)

Follow.create!([
  {follower_id: 4, following_id: 4, x: 0.0, y: 0.0, width: 1200, height: 800, angle: 0.0, scale: 1.0, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558937048/users/saron.jpg", color: "#584d3e", zindex: 0},
  {follower_id: 5, following_id: 5, x: 0.0, y: 0.0, width: 1200, height: 800, angle: 0.0, scale: 1.0, border: true, src: nil, color: nil, zindex: 0},
  {follower_id: 6, following_id: 6, x: 0.0, y: 0.0, width: 1200, height: 800, angle: 0.0, scale: 1.0, border: true, src: nil, color: nil, zindex: 0},
  {follower_id: 7, following_id: 7, x: 0.0, y: 0.0, width: 1200, height: 800, angle: 0.0, scale: 1.0, border: true, src: nil, color: nil, zindex: 0},
  {follower_id: 8, following_id: 8, x: 0.0, y: 0.0, width: 1200, height: 800, angle: 0.0, scale: 1.0, border: true, src: nil, color: nil, zindex: 0},
  {follower_id: 9, following_id: 9, x: 0.0, y: 0.0, width: 1200, height: 800, angle: 0.0, scale: 1.0, border: true, src: nil, color: nil, zindex: 0},
  {follower_id: 2, following_id: 4, x: 1345.13762227611, y: -268.556656184794, width: 1280, height: 853, angle: 0.0, scale: 0.850319406241852, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558937048/users/saron.jpg", color: "#584e40", zindex: nil},
  {follower_id: 3, following_id: 2, x: 1658.31942962968, y: -678.360785955885, width: 1200, height: 800, angle: 0.0, scale: 1.12993416503795, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558929196/users/peterxjang.jpg", color: "#48474e", zindex: nil},
  {follower_id: 10, following_id: 10, x: 0.0, y: 0.0, width: 1200, height: 800, angle: 0.0, scale: 1.0, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558827677/placeholder.jpg", color: nil, zindex: 0},
  {follower_id: 10, following_id: 2, x: 690.065471107316, y: -40.5920865357244, width: 1200, height: 800, angle: 0.0, scale: 0.430555555555556, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558929196/users/peterxjang.jpg", color: "#48474e", zindex: nil},
  {follower_id: 11, following_id: 11, x: 0.0, y: 0.0, width: 1200, height: 800, angle: 0.0, scale: 1.0, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558827677/placeholder.jpg", color: nil, zindex: 0},
  {follower_id: 3, following_id: 3, x: -25.438758428294, y: 21.1989653569112, width: 1280, height: 800, angle: 0.0, scale: 1.0, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558937260/users/test.jpg", color: "#396a6a", zindex: 0},
  {follower_id: 2, following_id: 3, x: 1223.53824268617, y: 739.361825405521, width: 1280, height: 800, angle: 0.0, scale: 0.821309842802418, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558937260/users/test.jpg", color: "#45696a", zindex: nil},
  {follower_id: 2, following_id: 2, x: -55.7294975003089, y: 65.1299693514055, width: 1200, height: 800, angle: 0.0, scale: 0.912368907681266, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558929196/users/peterxjang.jpg", color: "#48474e", zindex: 0}
])

Record.create!([
  {api_id: "155", collection_id: 2, name: "The Dark Knight", description: "Batman raises the stakes in his war on crime. With the help of Lt. Jim Gordon and District Attorney Harvey Dent, Batman sets out to dismantle the remaining criminal organizations that plague the streets. The partnership proves to be effective, but they soon find themselves prey to a reign of chaos unleashed by a rising criminal mastermind known to the terrified citizens of Gotham as the Joker.", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559765947/records/ivjliiv1ieef8pk3akfn.jpg", color: nil},
  {api_id: "603", collection_id: 2, name: "The Matrix", description: "Set in the 22nd century, The Matrix tells the story of a computer hacker who joins a group of underground insurgents fighting the vast and powerful computers who now rule the earth.", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559765964/records/xxbr97y38xtya8pnlbwc.jpg", color: nil},
  {api_id: "550", collection_id: 2, name: "Fight Club", description: "A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground ", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559766021/records/ev1klxkjanfeb2hspuxb.jpg", color: nil},
  {api_id: "15745", collection_id: 2, name: "Made", description: "Two aspiring boxers lifelong friends get involved in a money-laundering scheme through a low-level organized crime group.", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559767018/records/k6m6hg3p8ontgerekwml.jpg", color: nil},
  {api_id: "5236", collection_id: 2, name: "Kiss Kiss Bang Bang", description: "A petty thief posing as an actor is brought to Los Angeles for an unlikely audition and finds himself in the middle of a murder investigation along with his high school dream girl and a detective who's been training him for his upcoming role...", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559767063/records/mhjxeph0qhuxbxvnrsra.jpg", color: nil},
  {api_id: "2493", collection_id: 2, name: "The Princess Bride", description: "In this enchantingly cracked fairy tale, the beautiful Princess Buttercup and the dashing Westley must overcome staggering odds to find happiness amid six-fingered swordsmen, murderous princes, Sicilians and rodents of unusual size. But even death can't stop these true lovebirds from triumphing.", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559767152/records/ief0sl40pja2mvlxkuvq.jpg", color: nil},
  {api_id: "429", collection_id: 2, name: "Il buono, il brutto, il cattivo", description: "While the Civil War rages between the Union and the Confederacy, three men – a quiet loner, a ruthless hit man and a Mexican bandit – comb the American Southwest in search of a strongbox containing $200,000 in stolen gold.", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559767187/records/usngvyja0wxqfqsfnlb2.jpg", color: nil},
  {api_id: "14337", collection_id: 2, name: "Primer", description: "Friends and fledgling entrepreneurs invent a device in their garage which reduces the apparent mass of any object placed inside it, but they discover that it has some highly unexpected capabilities - ones that could enable them to do and to have seemingly anything they want. Taking advantage of this unique opportunity is the first challenge they face. Dealing with the consequences is the next.", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559770524/records/dsvhbrmpryfi6dzjcz50.jpg", color: nil},
  {api_id: "goodomensniceacc00gaim", collection_id: 3, name: "Good Omens", description: "", width: 180, height: 306, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559770553/records/bbxxqomnfuen7eq05gb1.jpg", color: nil},
  {api_id: "madetostickwhyso00heat", collection_id: 3, name: "Made to stick", description: "", width: 180, height: 274, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559770606/records/a8u1vz2cmwwjfzcqdilp.jpg", color: nil},
  {api_id: "4291", collection_id: 2, name: "菊次郎の夏", description: "Brash, loudmouthed and opportunistic, Kikujiro is the unlikely companion for Masao who is determined to see the mother he has never met. The two begin a series of adventures which soon turns out to be a whimsical journey of laughter and tears with a wide array of surprises and unique characters along the way.", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559770667/records/jqplsxajq1d6pxzrsaaj.jpg", color: nil},
  {api_id: "a795aff7-e3ee-31bd-ba14-680e21ddaf57", collection_id: 1, name: "Dookie", description: "Green Day", width: 500, height: 500, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559831728/records/tsilwwclzmntxefqvloi.png", color: nil},
  {api_id: "49d996b2-ab53-41bd-8789-3d87938dc07d", collection_id: 1, name: "Pinkerton", description: "Weezer", width: 1500, height: 1500, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559831772/records/vwwg0rjfgjm5lci6w9dt.jpg", color: nil},
  {api_id: "db425753-965f-4881-955b-8cd3ef65d1e6", collection_id: 1, name: "TRON: Legacy", description: "Daft Punk", width: 500, height: 500, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559855366/records/qgcixzbnjzmirdnxom2y.jpg", color: nil},
  {api_id: "5d34753b-7cb9-34ef-aeb3-0dd73384f54c", collection_id: 1, name: "Honky Château", description: "Elton John", width: 1400, height: 1400, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559916417/records/gidkwfogjcixqm8e2hmf.jpg", color: nil},
  {api_id: "3c5d0744-80ee-4507-966f-0ec3e23febbb", collection_id: 1, name: "Not So Commercial", description: "Los Amigos Invisibles", width: 200, height: 200, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559917146/records/hdsfxpzdldxpeafvqamo.jpg", color: nil},
  {api_id: "504608", collection_id: 2, name: "Rocketman", description: "The story of Elton John's life, from his years as a prodigy at the Royal Academy of Music through his influential and enduring musical partnership with Bernie Taupin.", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559926831/records/bszrqxvkicvlatjyqku4.jpg", color: nil},
  {api_id: "1771", collection_id: 2, name: "Captain America: The First Avenger", description: "During World War II, Steve Rogers is a sickly man from Brooklyn who's transformed into super-soldier Captain America to aid in the war effort. Rogers must stop the Red Skull – Adolf Hitler's ruthless head of weaponry, and the leader of an organization that intends to use a mysterious device of untold powers for world domination.", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559934810/records/wi84yorfw1deftpsbaqy.jpg", color: nil},
  {api_id: "9470", collection_id: 2, name: "功夫", description: "Set in Canton, China in the 1940s, the story revolves in a town ruled by the Axe Gang, Sing who desperately wants to become a member. He stumbles into a slum ruled by eccentric landlords who turns out to be the greatest kung-fu masters in disguise. Sing's actions eventually cause the Axe Gang and the slumlords to engage in an explosive kung-fu battle. Only one side will win and only one hero will emerge as the greatest kung-fu master of all.", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560299688/records/trlckrtxcpcg0dijskjp.jpg", color: nil},
  {api_id: "df73aab5-60dd-45a5-993b-c40ea08162ff", collection_id: 1, name: "American Idiot", description: "Green Day", width: 1448, height: 1448, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560350691/records/ju8x7qhw0lpw71te2eib.jpg", color: nil},
  {api_id: "7925da59-b862-41fd-b0cd-4a9b345f036f", collection_id: 1, name: "Mellon Collie and the Infinite Sadness", description: "The Smashing Pumpkins", width: 600, height: 600, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560353167/records/wp0xdo3agzrncfox1hbt.jpg", color: nil},
  {api_id: "frannyzooey00salirich", collection_id: 3, name: "Franny and Zooey", description: "", width: 180, height: 307, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560353209/records/ffxshgdjjx5gvqjkau6n.jpg", color: nil},
  {api_id: "nondesignersdesi00will", collection_id: 3, name: "The Non-Designer's Design Book", description: "", width: 180, height: 272, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560353402/records/maizv6dlkc2h7ciptzhf.jpg", color: nil},
  {api_id: "212778", collection_id: 2, name: "Chef", description: "When Chef Carl Casper suddenly quits his job at a prominent Los Angeles restaurant after refusing to compromise his creative integrity for its controlling owner, he is left to figure out what's next. Finding himself in Miami, he teams up with his ex-wife, his friend and his son to launch a food truck. Taking to the road, Chef Carl goes back to his roots to reignite his passion for the kitchen -- and zest for life and love.", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560388097/records/nn9duidt90f0m0ccovzf.jpg", color: nil},
  {api_id: nil, collection_id: 4, name: "Test", description: "fdsfadsfsa", width: 399, height: 379, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561152198/records/k7vfxqvfi5wq1jegkfcc.png", color: "#4e9dea"},
  {api_id: nil, collection_id: 4, name: "A blog post", description: "# Some thoughts\r\nThis was written using markdown.\r\n\r\nHere is a list\r\n\r\n1. One thing\r\n2. Another thing\r\n\r\nHere is some code?\r\n\r\n```\r\ndef hello\r\n  puts \"hi\"\r\nend\r\n```\r\n## A sub header\r\nThis is some more stuff", width: 960, height: 500, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561152729/records/woy78ppq9ydt6mb4hn4a.jpg", color: "#54524b"},
  {api_id: nil, collection_id: 4, name: "Testsets", description: "testsafdsfsd", width: 200, height: 200, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561315942/records/efgwpvcpqwjro9dfa3st.jpg", color: "#595959"},
  {api_id: nil, collection_id: 4, name: "Avatar", description: "# This is an avatar\r\nhello", width: 600, height: 600, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561315992/records/dfhp9lx4le2tbleukzlr.jpg", color: nil},
  {api_id: nil, collection_id: 4, name: "18th street Pink Line", description: "### The Pink Line stop\r\nThis is where I take the bus.\r\n\r\nHere is a list:\r\n\r\n* One\r\n* Two\r\n* Three", width: 3456, height: 2304, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561484355/records/nbxxpgpnp7rcz3bjchox.jpg", color: "#706056"},
  {api_id: nil, collection_id: 4, name: "New York", description: "### Weird place\r\n\r\nNice room, weird setup.", width: 1214, height: 822, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561493058/records/tavr2mi0aq6zmnubjyl8.png", color: nil},
  {api_id: nil, collection_id: 4, name: "Prework", description: "This is a _test_ **test** test", width: 1982, height: 1188, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561495116/records/gzimmlfiem7vkyryinoi.png", color: "#dedad4"},
  {api_id: nil, collection_id: 4, name: "Modern JavaScript Explained For Dinosaurs", description: "", width: 1400, height: 910, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1564074033/records/bioyi5fxj0rnz8g17u4w.png", color: "#c7dcbb"},
  {api_id: nil, collection_id: 4, name: "Capstones", description: "## This is a test\r\n\r\n1. One\r\n2. Two\r\n3. Three\r\n\r\nhello there", width: 2048, height: 1365, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1565101653/records/zqsr4ygeaq7z7e1mityu.jpg", color: "#574d4c"},
  {api_id: nil, collection_id: 4, name: "Modern CSS Explained For Dinosaurs", description: "CSS is strangely considered both one of the easiest and one of the hardest languages to learn as a web developer. It’s certainly easy enough to get started with it — you define style properties and values to apply to specific elements, and…that’s pretty much all you need to get going! However, it gets tangled and complicated to organize CSS in a meaningful way for larger projects. Changing any line of CSS to style an element on one page often leads to unintended changes for elements on other pages.\r\n\r\nIn order to deal with the inherent complexity of CSS, all sorts of different best practices have been established. The problem is that there isn’t any strong consensus on which best practices are in fact the best, and many of them seem to completely contradict each other. If you’re trying to learn CSS for the first time, this can be disorienting to say the least.\r\n\r\nThe goal of this article is to provide a historical context of how CSS approaches and tooling have evolved to what they are today in 2018. By understanding this history, it will be easier to understand each approach and how to use them to your benefit. Let’s get started!\r\n\r\n### Using CSS for basic styling\r\nLet’s start with a basic website using just a simple index.html file that links to a separate index.css file:\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Modern CSS</title>\r\n  <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n  <header>This is the header.</header>\r\n  <main>\r\n    <h1>This is the main content.</h1>\r\n    <p>...</p>\r\n  </main>\r\n  <nav>\r\n    <h4>This is the navigation section.</h4>\r\n    <p>...</p>\r\n  </nav>\r\n  <aside>\r\n    <h4>This is an aside section.</h4>\r\n    <p>...</p>\r\n  </aside>\r\n  <footer>This is the footer.</footer>\r\n</body>\r\n</html>\r\n```\r\n\r\nRight now we aren’t using any classes or ids in the HTML, just semantic tags. Without any CSS, the website looks like this (using placeholder text):\r\n\r\n![modern-css-dinosaur-02.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312299/images/ha15lzuobge9m4ikyzmt.png)\r\n*Click here to see a live example*\r\n\r\nFunctional, but not very pretty. We can add CSS to improve the basic typography in index.css:\r\n\r\n```\r\n/* BASIC TYPOGRAPHY */\r\n/* from https://github.com/oxalorg/sakura */html {\r\n  font-size: 62.5%;\r\n  font-family: serif;\r\n}body {\r\n  font-size: 1.8rem;\r\n  line-height: 1.618;\r\n  max-width: 38em;\r\n  margin: auto;\r\n  color: #4a4a4a;\r\n  background-color: #f9f9f9;\r\n  padding: 13px;\r\n}@media (max-width: 684px) {\r\n  body {\r\n    font-size: 1.53rem;\r\n  }\r\n}@media (max-width: 382px) {\r\n  body {\r\n    font-size: 1.35rem;\r\n  }\r\n}h1, h2, h3, h4, h5, h6 {\r\n  line-height: 1.1;\r\n  font-family: Verdana, Geneva, sans-serif;\r\n  font-weight: 700;\r\n  overflow-wrap: break-word;\r\n  word-wrap: break-word;\r\n  -ms-word-break: break-all;\r\n  word-break: break-word;\r\n  -ms-hyphens: auto;\r\n  -moz-hyphens: auto;\r\n  -webkit-hyphens: auto;\r\n  hyphens: auto;\r\n}h1 {\r\n  font-size: 2.35em;\r\n}h2 {\r\n  font-size: 2em;\r\n}h3 {\r\n  font-size: 1.75em;\r\n}h4 {\r\n  font-size: 1.5em;\r\n}h5 {\r\n  font-size: 1.25em;\r\n}h6 {\r\n  font-size: 1em;\r\n}\r\n```\r\n\r\nHere most of the CSS is styling the typography (fonts with sizes, line height, etc.), with some styling for the colors and a centered layout. You’d have to study design to know good values to choose for each of these properties (these styles are from sakura.css), but the CSS itself that’s being applied here isn’t too complicated to read. The result looks like this:\r\n\r\n![modern-css-dinosaur-03.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312355/images/bm2dy8aent7wakz4rfnl.png)\r\n*Click here to see a live example*\r\n\r\nWhat a difference! This is the promise of CSS — a simple way to add styles to a document, without requiring programming or complex logic. Unfortunately, things start to get hairier when we use CSS for more than just typography and colors (which we’ll tackle next).\r\n\r\n### Using CSS for layout\r\n\r\nIn the 1990s, before CSS gained wide adoption, there weren’t a lot of options to layout content on the page. HTML was originally designed as a language to create plain documents, not dynamic websites with sidebars, columns, etc. In those early days, layout was often done using HTML tables — the entire webpage would be within a table, which could be used to organize the content in rows and columns. This approach worked, but the downside was the tight coupling of content and presentation — if you wanted to change the layout of a site, it would require rewriting significant amounts of HTML.\r\n\r\nOnce CSS entered the scene, there was a strong push to keep content (written in the HTML) separate from presentation (written in the CSS). So people found ways to move all layout code out of HTML (no more tables) into CSS. It’s important to note that like HTML, CSS wasn’t really designed to layout content on a page either, so early attempts at this separation of concerns were difficult to achieve gracefully.\r\n\r\nLet’s take a look at how this works in practice with our above example. Before we define any CSS layout, we’ll first reset any margins and paddings (which affect layout calculations) as well as give section distinct colors (not to make it pretty, but to make each section visually stand out when testing different layouts).\r\n\r\n```\r\n/* RESET LAYOUT AND ADD COLORS */body {\r\n  margin: 0;\r\n  padding: 0;\r\n  max-width: inherit;\r\n  background: #fff;\r\n  color: #4a4a4a;\r\n}header, footer {\r\n  font-size: large;\r\n  text-align: center;\r\n  padding: 0.3em 0;\r\n  background-color: #4a4a4a;\r\n  color: #f9f9f9;\r\n}nav {\r\n  background: #eee;\r\n}main {\r\n  background: #f9f9f9;\r\n}aside {\r\n  background: #eee;\r\n}\r\n```\r\n\r\nNow the website temporarily looks like:\r\n\r\n![modern-css-dinosaur-04.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312419/images/x0xnclhrk2uue3az1sti.png)\r\n*Click here to see a live example*\r\n\r\nNow we’re ready to use CSS to layout the content on the page. We’ll look at three different approaches in chronological order, starting with the classic float-based layouts.\r\n\r\n#### Float-based layout\r\n\r\nThe CSS float property was originally introduced to float an image inside a column of text on the left or right (something you often see in newspapers). Web developers in the early 2000s took advantage of the fact that you could float not just images, but any element, meaning you could create the illusion of rows and columns by floating entire divs of content. But again, floats weren’t designed for this purpose, so creating this illusion was difficult to pull off in a consistent fashion.\r\n\r\nIn 2006, A List Apart published the popular article In Search of the Holy Grail, which outlined a detailed and thorough approach to creating what was known as the Holy Grail layout — a header, three columns and a footer. It’s pretty crazy to think that what sounds like a fairly straightforward layout would be referred to as the Holy Grail, but that was indeed how hard it was to create consistent layout at the time using pure CSS.\r\n\r\nBelow is a float-based layout for our example based on the technique described in that article:\r\n\r\n```\r\n/* FLOAT-BASED LAYOUT */body {\r\n  padding-left: 200px;\r\n  padding-right: 190px;\r\n  min-width: 240px;\r\n}header, footer {\r\n  margin-left: -200px;\r\n  margin-right: -190px;   \r\n}main, nav, aside {\r\n  position: relative;\r\n  float: left;\r\n}main {\r\n  padding: 0 20px;\r\n  width: 100%;\r\n}nav {\r\n  width: 180px;\r\n  padding: 0 10px;\r\n  right: 240px;\r\n  margin-left: -100%;\r\n}aside {\r\n  width: 130px;\r\n  padding: 0 10px;\r\n  margin-right: -100%;\r\n}footer {\r\n  clear: both;\r\n}* html nav {\r\n  left: 150px;\r\n}\r\n```\r\n\r\nLooking at the CSS, you can see there are quite a few hacks necessary to get it to work (negative margins, the clear: both property, hard-coded width calculations, etc.) — the article does a good job explaining the reasoning for each in detail. Below is what the result looks like:\r\n\r\n![modern-css-dinosaur-05.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312470/images/wbwc8qffmqiavmaipl5i.png)\r\n*Click here to see a live example*\r\n\r\nThis is nice, but you can see from the colors that the three columns are not equal in height, and the page doesn’t fill the height of the screen. These issues are inherent with a float-based approach. All a float can do is place content to the left or right of a section — the CSS has no way to infer the heights of the content in the other sections. This problem had no straightforward solution until many years later, with a flexbox-based layout.\r\n\r\n#### Flexbox-based layout\r\n\r\nThe flexbox CSS property was first proposed in 2009, but didn’t get widespread browser adoption until around 2015. Flexbox was designed to define how space is distributed across a single column or row, which makes it a better candidate for defining layout compared to using floats. This meant that after about a decade of using float-based layouts, web developers were finally able to use CSS for layout without the need for the hacks needed with floats.\r\n\r\nBelow is a flexbox-based layout for our example based on the technique described on the site Solved by Flexbox (a popular resource showcasing different flexbox examples). Note that in order to make flexbox work, we need to an an extra wrapper div around the three columns in the HTML:\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Modern CSS</title>\r\n  <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n  <header>This is the header.</header>\r\n  <div class=\"container\">\r\n    <main>\r\n      <h1>This is the main content.</h1>\r\n      <p>...</p>\r\n    </main>\r\n    <nav>\r\n      <h4>This is the navigation section.</h4>\r\n      <p>...</p>\r\n    </nav>\r\n    <aside>\r\n      <h4>This is an aside section.</h4>\r\n      <p>...</p>\r\n    </aside>\r\n  </div>\r\n  <footer>This is the footer.</footer>\r\n</body>\r\n</html>\r\n```\r\n\r\nAnd here’s the flexbox code in the CSS:\r\n\r\n```\r\n/* FLEXBOX-BASED LAYOUT */body {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n}.container {\r\n  display: flex;\r\n  flex: 1;\r\n}main {\r\n  flex: 1;\r\n  padding: 0 20px;\r\n}nav {\r\n  flex: 0 0 180px;\r\n  padding: 0 10px;\r\n  order: -1;\r\n}aside {\r\n  flex: 0 0 130px;\r\n  padding: 0 10px;\r\n}\r\n```\r\n\r\nThat is way, way more compact compared to the float-based layout approach! The flexbox properties and values are a bit confusing at first glance, but it eliminates the need for a lot of the hacks like negative margins that were necessary with float-based layouts — a huge win. Here is what the result looks like:\r\n\r\n![modern-css-dinosaur-06.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312861/images/liegzpoogzxy6s0kmyms.png)\r\n*Click here for a live example*\r\n\r\nMuch better! The columns are all equal height and take up the full height of the page. In some sense this seems perfect, but there are a couple of minor downsides to this approach. One is browser support — currently every modern browser supports flexbox, but some older browsers never will. Fortunately browser vendors are making a bigger push to end support for these older browsers, making a more consistent development experience for web designers. Another downside is the fact that we needed to add the `<div class=\"container\">` to the markup — it would be nice to avoid it. In an ideal world, any CSS layout wouldn’t require changing the HTML markup at all.\r\n\r\nThe biggest downside though is the code in the CSS itself — flexbox eliminates a lot of the float hacks, but the code isn’t as expressive as it could be for defining layout. It’s hard to read the flexbox CSS and get a visual understanding how all of the elements will be laid out on the page. This leads to a lot of guessing and checking when writing flexbox-based layouts.\r\n\r\nIt’s important to note again that flexbox was designed to space elements within a single column or row — it was not designed for an entire page layout! Even though it does a serviceable job (much better than float-based layouts), a different specification was specifically developed to handle layouts with multiple rows and columns. This specification is known as CSS grid.\r\n\r\n#### Grid-based layout\r\n\r\nCSS grid was first proposed in 2011 (not too long after the flexbox proposal), but took a long time to gain widespread adoption with browsers. As of early 2018, CSS grid is supported by most modern browsers (a huge improvement over even a year or two ago).\r\n\r\nBelow is a grid-based layout for our example based on the first method in this CSS tricks article. Note that for this example, we can get rid of the `<div class=\"container\">` that we had to add for the flexbox-based layout — we can simply use the original HTML without modification. Here’s what the CSS looks like:\r\n\r\n```\r\n/* GRID-BASED LAYOUT */body {\r\n  display: grid;\r\n  min-height: 100vh;\r\n  grid-template-columns: 200px 1fr 150px;\r\n  grid-template-rows: min-content 1fr min-content;\r\n}header {\r\n  grid-row: 1;\r\n  grid-column: 1 / 4;\r\n}nav {\r\n  grid-row: 2;\r\n  grid-column: 1 / 2;\r\n  padding: 0 10px;\r\n}main {\r\n  grid-row: 2;\r\n  grid-column: 2 / 3;\r\n  padding: 0 20px;\r\n}aside {\r\n  grid-row: 2;\r\n  grid-column: 3 / 4;\r\n  padding: 0 10px;\r\n}footer {\r\n  grid-row: 3;\r\n  grid-column: 1 / 4;\r\n}\r\n```\r\n\r\nThe result is visually identical to the flexbox based layout. However, the CSS here is much improved in the sense that it clearly expresses the desired layout. The size and shape of the columns and rows are defined in the body selector, and each item in the grid is defined directly by its position.\r\n\r\nOne thing that can be confusing is the grid-column property, which defines the start point / end point of the column. It can be confusing because in this example, there are 3 columns, but the numbers range from 1 to 4. It becomes more clear when you look at the picture below:\r\n\r\n![modern-css-dinosaur-07.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312841/images/d2u7qnlohvos0x6zgxql.png)\r\n*Click here to see a live example*\r\n\r\nThe first column starts at 1 and ends at 2, the second column starts at 2 and ends at 3, and the third column starts at 3 and ends at 4. The header has a grid-column of 1 / 4 to span the entire page, the nav has a grid-column of 1 / 2 to span the first column, etc.\r\n\r\nOnce you get used to the grid syntax, it clearly becomes the ideal way to express layout in CSS. The only real downside to a grid-based layout is browser support, which again has improved tremendously over the past year. It’s hard to overstate the importance of CSS grid as the first real tool in CSS that was actually designed for layout. In some sense, web designers have always had to be very conservative with making creative layouts, since the tools up until now have been fragile, using various hacks and workarounds. Now that CSS grid exists, there is the potential for a new wave of creative layout designs that never would have been possible before — exciting times!\r\n\r\n![modern-css-dinosaur-08.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312811/images/ib8se73xxnbvzatrjwcn.png)\r\n\r\n### Using a CSS preprocessor for new syntax\r\n\r\nSo far we’ve covered using CSS for basic styling as well as layout. Now we’ll get into tooling that was created to help improve the experience of working with CSS as a language itself, starting with CSS preprocessors.\r\n\r\nA CSS preprocessor allows you to write styles using a different language which gets converted into CSS that the browser can understand. This was critical back in the day when browsers were very slow to implement new features. The first major CSS preprocessor was Sass, released in 2006. It featured a new concise syntax (indentation instead of brackets, no semicolons, etc.) and added advanced features missing from CSS, such as variables, helper functions, and calculations. Here’s what the color section of our earlier example would look like using Sass with variables:\r\n\r\n```\r\n$dark-color: #4a4a4a\r\n$light-color: #f9f9f9\r\n$side-color: #eeebody\r\n  color: $dark-color\r\n  \r\nheader, footer\r\n  background-color: $dark-color\r\n  color: $light-color\r\n  \r\nmain\r\n  background: $light-colornav, aside\r\n  background: $side-color\r\n```\r\n\r\nNote how reusable variables are defined with the $ symbol, and that brackets and semicolons are eliminated, making for a cleaner looking syntax. The cleaner syntax in Sass is nice, but features like variables were revolutionary at the time, as they opened up new possibilities for writing clean and maintainable CSS.\r\n\r\nTo use Sass, you need to install Ruby, the programming language used to compile Sass code to regular CSS. Then you would need to install the Sass gem, then run a command in the command line to convert your .sass files into .css files. Here’s an example of what a command would look like:\r\n\r\n```\r\nsass --watch index.sass index.css\r\n```\r\n\r\nThis command will convert Sass code written in a file named index.sass to regular CSS in a file named index.css (the `--watch` argument tells it to run any time the input changes on save, which is convenient).\r\n\r\nThis process is known as a build step, and it was a pretty significant barrier to entry back in 2006. If you’re used to programming languages like Ruby, the process is pretty straightforward. But many frontend developers at the time only worked with HTML and CSS, which did not require any such tools. So it was a big ask to have someone learn an entire ecosystem to be able to get the features offered by a CSS preprocessor.\r\n\r\nIn 2009, the Less CSS preprocessor was released. It was also written in Ruby, and offered similar features to Sass. The key difference was the syntax, which was designed to be as close to CSS as possible. This means that any CSS code is valid Less code. Here’s the same example written using Less syntax:\r\n\r\n```\r\n@dark-color: #4a4a4a;\r\n@light-color: #f9f9f9;\r\n@side-color: #eee;body {\r\n  color: @dark-color;\r\n}\r\n  \r\nheader, footer {\r\n  background-color: @dark-color;\r\n  color: @light-color;\r\n}\r\n  \r\nmain {\r\n  background: @light-color;\r\n}nav, aside {\r\n  background: @side-color;\r\n}\r\n```\r\n\r\nIt’s nearly the same (`@` prefix instead of `$` for variables), but not as pretty as the Sass example, with the same curly brackets and semi-colons as CSS. Yet the fact that it’s closer to CSS made it easier for developers to adopt it. In 2012, Less was rewritten to use JavaScript (specifically Node.js) instead of Ruby for compiling. This made Less faster than its Ruby counterparts, and made it more appealing to developers who were already using Node.js in their workflows.\r\n\r\nTo convert this code to regular CSS, you would first need to install Node.js, then install Less, then run a command like:\r\n\r\n```\r\nlessc index.less index.css\r\n```\r\n\r\nThis command will convert Less code written in a file named index.less to regular CSS in a file named index.css. Note that the lessc command does not come with a way to watch files for changes (unlike the sass command), meaning you would need to install a different tool to automatically watch and compile .less files, adding a bit more complexity to the process. Again, this is not difficult for programmers who are used to using command line tools, but it is a significant barrier to entry for others who simply want to use a CSS preprocessor.\r\n\r\nAs Less gained mindshare, Sass developers adapted by adding a new syntax called SCSS in 2010 (which was a superset of CSS similar to Less). They also released LibSass, a C/C++ port of the Ruby Sass engine, which made it faster and able to be used in various languages.\r\n\r\nAnother alternative CSS preprocessor is Stylus, which came out in 2010, written in Node.js, and focuses on cleaner syntax compared to Sass or Less. Usually conversations about CSS preprocessors focus on those three as the most popular (Sass, Less, and Stylus). In the end, they are all pretty similar in terms of the features they offer, so you can’t really go wrong picking any of them.\r\n\r\nHowever, some people make the argument that CSS preprocessors are becoming less necessary, as browsers are finally beginning to implement some of their features (such as variables and calculations). Furthermore, there’s a different approach known as CSS postprocessing that has the potential to make CSS preprocessors obsolete (obviously not without controversy), which we’ll get into next.\r\n\r\n### Using a CSS postprocessor for transformative features\r\n\r\nA CSS postprocessor uses JavaScript to analyze and transform your CSS into valid CSS. In this sense it’s pretty similar to a CSS preprocessor — you can think of it as a different approach to solving the same problem. The key difference is that while a CSS preprocessor uses special syntax to identify what needs to be transformed, a CSS postprocessor can parse regular CSS and transform it without any special syntax required. This is best illustrated with an example. Let’s look at a part of the CSS we originally defined above to style the header tags:\r\n\r\n```\r\nh1, h2, h3, h4, h5, h6 {\r\n  -ms-hyphens: auto;\r\n  -moz-hyphens: auto;\r\n  -webkit-hyphens: auto;\r\n  hyphens: auto;\r\n}\r\n```\r\n\r\nThe items in bold are called vendor prefixes. Vendor prefixes are used by browsers when they are experimentally adding or testing new CSS features, giving a way for developers to use these new CSS properties while the implementation is being finalized. Here the -ms prefix is for Microsoft Internet Explorer, the -moz prefix is for Mozilla Firefox, and the -webkit prefix is for browsers using the webkit rendering engine (like Google Chrome, Safari, and newer versions of Opera).\r\n\r\nIt’s pretty annoying to remember to put in all these different vendor prefixes to use these CSS properties. It would be nice to have a tool that can automatically put in vendor prefixes as needed. We can sort of pull this off with CSS preprocessors. For example, you could do something like this with SCSS:\r\n\r\n```\r\n@mixin hyphens($value) {\r\n  -ms-hyphens: $value;\r\n  -moz-hyphens: $value;\r\n  -webkit-hyphens: $value;\r\n  hyphens: $value;\r\n}h1, h2, h3, h4, h5, h6 {\r\n  @include hyphens(auto);\r\n}\r\n```\r\n\r\nHere we’re using Sass’ mixin feature, which allows you to define a chunk of CSS once and reuse it anywhere else. When this file is compiled into regular CSS, any @include statements will be replaced with the CSS from the matching @mixin. Overall this isn’t a bad solution, but you are responsible for defining each mixin the first time for any CSS property requiring vendor prefixes. These mixin definitions will require maintenance, as you may want to remove specific vendor prefixes that you no longer need as browsers update their CSS compatibility.\r\n\r\nInstead of using mixins, it would be nice to simply write normal CSS and have a tool automatically identify properties that require prefixes and add them accordingly. A CSS postprocessor is capable of doing exactly that. For example, if you use PostCSS with the autoprefixer plugin, you can write completely normal CSS without any vendor prefixes and let the postprocessor do the rest of the work:\r\n\r\n```\r\nh1, h2, h3, h4, h5, h6 {\r\n  hyphens: auto;\r\n}\r\n```\r\n\r\nWhen you run the CSS postprocessor on this code, the result is the hyphens: auto; line gets replaced with all the appropriate vendor prefixes (as defined in the autoprefixer plugin, which you don’t need to directly manage). Meaning you can just write regular CSS without having to worry about any compatibility or special syntax, which is nice!\r\n\r\nThere are plugins other than autoprefixer for PostCSS that allow you to do really cool things. The cssnext plugin allows you to use experimental CSS features. The CSS modules plugin automatically changes classes to avoid name conflicts. The stylelint plugin identifies errors and inconsistent conventions in your CSS. These tools have really started to take off in the last year or two, showcasing developer workflows that has never been possible before!\r\n\r\nThere is a price to pay for this progress, however. Installing and using a CSS postprocessor like PostCSS is more involved compared to using a CSS preprocessor. Not only do you have to install and run tools using the command line, but you need to install and configure individual plugins and define a more complex set of rules (like which browsers you are targeting, etc.) Instead of running PostCSS straight from the command line, many developers integrate it into configurable build systems like Grunt, Gulp, or webpack, which help manage all the different build tools you might use in your frontend workflow.\r\n\r\n    Note: It can be quite overwhelming to learn all the necessary parts to making a modern frontend build system work if you’ve never used one before. If you want to get started from scratch, check out my article Modern JavaScript Explained For Dinosaurs, which goes over all the JavaScript tooling necessary to take advantage of these modern features for a frontend developer.\r\n\r\nIt’s worth noting that there is some debate around CSS postprocessors. Some argue that the terminology is confusing (one argument is that they should all be called CSS preprocessors, another argument is that they should just be simply called CSS processors, etc.). Some believe CSS postprocessors eliminate the need for CSS preprocessors altogether, some believe they should be used together. In any case, it’s clear that learning how to use a CSS postprocessor is worth it if you’re interested in pushing the edge of what’s possible with CSS.\r\n\r\n![modern-css-dinosaur-09.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312784/images/uplqm5alom18elrnkdvw.png)\r\n\r\n### Using CSS methodologies for maintainability\r\n\r\nTools like CSS preprocessors and CSS postprocessors go a long way towards improving the CSS development experience. But these tools alone aren’t enough to solve the problem of maintaining large CSS codebases. To address this, people began to document different guidelines on how to write CSS, generally referred to as CSS methodologies.\r\n\r\nBefore we dive into any particular CSS methodology, it’s important to understand what makes CSS hard to maintain over time. The key issue is the global nature of CSS — every style you define is globally applied to every part of the page. It becomes your job to either come up with a detailed naming convention to maintain unique class names or wrangle with specificity rules to determine which style gets applied any given element. CSS methodologies provide an organized way to write CSS in order to avoid these pain points with large code bases. Let’s take a look at some of the popular methodologies in rough chronological order.\r\n\r\n#### OOCSS\r\n\r\nOOCSS (Object Oriented CSS) was first presented in 2009 as a methodology organized around two main principles. The first principle is separate structure and skin. This means the CSS to define the structure (like layout) shouldn’t be mixed together with the CSS to define the skin (like colors, fonts, etc.). This makes it easier to “re-skin” an application. The second principle is separate container and content. This means think of elements as re-usable objects, with the key idea being that an object should look the same regardless of where it is on the page.\r\n\r\nOOCSS provides well thought out guidelines, but isn’t very prescriptive on the specifics of the approach. Later approaches like SMACSS took the core concepts and added more detail to make it easier to get started.\r\n\r\n#### SMACSS\r\n\r\nSMACSS (Scalable and Modular Architecture for CSS) was introduced in 2011 as a methodology based around writing your CSS in 5 distinct categories — base rules, layout rules, modules, state rules, and theme rules. The SMACSS methodology also recommends some naming conventions. For layout rules, you would prefix class names with l- or layout-. For state rules, you would prefix class names that describe the state, like is-hidden or is-collapsed.\r\n\r\nSMACSS has a lot more specifics in its approach compared to OOCSS, but it still requires some careful thought in deciding what CSS rules should go into which category. Later approaches like BEM took away some of this decision making to make it even easier to adopt.\r\n\r\n#### BEM\r\n\r\nBEM (Block, Element, Modifier) was introduced in 2010 as a methodology organized around the idea of dividing the user interface into independent blocks. A block is a re-usable component (an example would be a search form, defined as `<form class=\"search-form\"></form>`). An element is a smaller part of a block that can’t be re-used on its own (an example would be a button within the search form, defined as `<button class=\"search-form__button\">Search</button>`). A modifier is an entity that defines the appearance, state, or behavior of a block or element (an example would be a disabled search form button, defined as `<button class=\"search-form__button search-form__button--disabled\">Search</button>`).\r\n\r\nThe BEM methodology is simple to understand, with a specific naming convention that allows newcomers to apply it without having to make complex decisions. The downside for some is that the class names can be quite verbose, and don’t follow traditional rules for writing semantic class names. Later approaches like Atomic CSS would take this untraditional approach to a whole other level!\r\n\r\n#### Atomic CSS\r\n\r\nAtomic CSS (also known as Functional CSS) was introduced in 2014 as a methodology organized around the idea of creating small, single-purpose classes with names based on visual function. This approach is in complete opposition with OOCSS, SMACSS, and BEM — instead of treating elements on the page as re-usable objects, Atomic CSS ignores these objects altogether and uses re-usable single purpose utility classes to style each element. So instead of something like `<button class=\"search-form__button\">Search</button>`, you would have something like `<button class=\"f6 br3 ph3 pv2 white bg-purple hover-bg-light-purple\">Search</button>`.\r\n\r\nIf your first reaction to this example is to recoil in horror, you’re not alone — many people saw this methodology as a complete violation of established CSS best practices. However, there has been a lot of excellent discussion around the idea of questioning the effectiveness of those best practices in different scenarios. This article does a great job highlighting how traditional separation of concerns ends up creating CSS that depends on the HTML (even when using methodologies like BEM), while an atomic or functional approach is about creating HTML that depends on the CSS. Neither is wrong, but upon close inspection you can see that a true separation of concerns between CSS and HTML is never fully achievable!\r\n\r\nOther CSS methodologies like CSS in JS actually embrace the notion that CSS and HTML will always depend on each other, leading to one of the most controversial methodologies yet…\r\n\r\n#### CSS in JS\r\n\r\nCSS in JS was introduced in 2014 as a methodology organized around defining CSS styles not in a separate style sheet, but directly in each component itself. It was introduced as an approach for the React JavaScript framework (which already took the controversial approach of defining the HTML for a component directly in JavaScript instead of a separate HTML file). Originally the methodology used inline styles, but later implementations used JavaScript to generate CSS (with unique class names based on the component) and insert it into the document with a style tag.\r\n\r\nThe CSS in JS methodology once again goes completely against established CSS best practices of separation of concerns. This is because the way we use the web has shifted dramatically over time. Originally the web largely consisted of static web sites — here the separation of HTML content from CSS presentation makes a lot of sense. Nowadays the web is used for creating dynamic web applications — here it makes sense to separate things out by re-usable components.\r\n\r\nThe goal of the CSS in JS methodology is to be able to define components with hard boundaries that consist of their own encapsulated HTML/CSS/JS, such that the CSS in one component has no chance of affecting any other components. React was one of the first widely adopted frameworks that pushed for these components with hard boundaries, influencing other major frameworks like Angular, Ember, and Vue.js to follow suit. It’s important to note that the CSS in JS methodology is relatively new, and there’s a lot of experimentation going on in this space as developers try to establish new best practices for CSS in the age of components for web applications.\r\n\r\nIt’s easy to get overwhelmed by the many different CSS methodologies that are out there, but it’s important to keep in mind that there is no one right approach — you should think of them as different possible tools you can use when you have a sufficiently complex CSS codebase. Having different well-thought-out options to choose from works in your favor, and all the recent experimentation happening in this space benefits every developer in the long run!\r\n\r\n### Conclusion\r\n\r\nSo this is modern CSS in a nutshell. We covered using CSS for basic styling with typographic properties, using CSS for layout using float, flexbox, and grid based approaches, using a CSS preprocessor for new syntax such as variables and mixins, using a CSS postprocessor for transformative features such as adding vendor prefixes, and using CSS methodologies for maintainability to overcome the global nature of CSS styles. We didn’t get a chance to dig into a lot of other features CSS has to offer, like advanced selectors, transitions, animations, shapes, dynamic variables — the list goes on and on. There’s a lot of ground to cover with CSS — anyone who says it’s easy probably doesn’t know the half of it!\r\n\r\nModern CSS can definitely be frustrating to work with as it continues to change and evolve at a rapid pace. But it’s important to remember the historical context of how the web has evolved over time, and it’s good to know that there are a lot of smart people out there willing to build concrete tools and methodologies to help CSS best practices evolve right along with the web. It’s an exciting time to be a developer, and I hope this information can serve as a roadmap to help you on your journey!\r\n\r\n![modern-css-dinosaur-10.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312751/images/b75exdbmzkerz6ltdiep.png)\r\n\r\nSpecial thanks again to @ryanqnorth’s Dinosaur Comics, which has served up some of the finest absurdist humor since 2003 (when dinosaurs ruled the web).", width: 1129, height: 735, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1566312873/records/sjfohzgfew4kcr1hvhta.png", color: nil},
  {api_id: "19913", collection_id: 2, name: "(500) Days of Summer", description: "Tom, greeting-card writer and hopeless romantic, is caught completely off-guard when his girlfriend, Summer, suddenly dumps him. He reflects on their 500 days together to try to figure out where their love affair went sour, and in doing so, Tom rediscovers his true passions in life.", width: 300, height: 450, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567004299/records/dogyqte2dutlqubgs6hl.jpg", color: nil},
  {api_id: nil, collection_id: 4, name: "shirt", description: "this is a shirt", width: 2282, height: 1730, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567174893/records/veggb7trnrihw3ybklio.png", color: "#97aba2"},
  {api_id: "eb88fcad-d3fe-3645-b036-bdab63c54bf5", collection_id: 1, name: "Is This It", description: "The Strokes", width: 1000, height: 1000, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567174967/records/w6dfbcvjc8a3eog2sclh.jpg", color: nil},
  {api_id: "ff368c13-d0f2-4fb1-b2b7-822b74c4d610", collection_id: 1, name: "3 Feet High and Rising", description: "De La Soul", width: 301, height: 300, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567175193/records/dvsvnoht2lt7pitdbwyq.jpg", color: nil},
  {api_id: "7419a20c-ac88-45ac-89dc-426d9441056b", collection_id: 1, name: "3 Feet High and Rising", description: "De La Soul", width: 500, height: 500, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567178715/records/fwsr87uyoy9blim7rso0.jpg", color: nil},
  {api_id: nil, collection_id: 1, name: "sample", description: "fds", width: 2048, height: 1365, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567179179/records/cripkkioje0epjcycf40.jpg", color: "#574d4c"},
  {api_id: "c20b91aa-8f3e-410e-83cf-12de62600c1f", collection_id: 1, name: "Sgt. Pepper’s Lonely Hearts Club Band", description: "The Beatles", width: 1434, height: 1404, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567179316/records/q4wi8dbyueoso7t4b3iq.jpg", color: nil},
  {api_id: "5ad66522-edce-3a77-b5fa-7956ee879239", collection_id: 1, name: "Discovery", description: "Daft Punk", width: 1200, height: 1200, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567183591/records/juwjbaf5fyznimr4ehhe.jpg", color: nil},
  {api_id: "isbn_9780786296651", collection_id: 3, name: "Harry Potter and the Deathly Hallows", description: "", width: 180, height: 289, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567183703/records/dex6iztlgy3hh4jxcdrj.jpg", color: nil},
  {api_id: "americangodsnove00gaim_041", collection_id: 3, name: "American Gods", description: "", width: 180, height: 272, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1569961095/records/hmaramnbwslui2xct39y.jpg", color: nil},
  {api_id: "catcherinrye00salirich", collection_id: 3, name: "The Catcher in the Rye", description: "", width: 180, height: 310, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1569961442/records/sgd2dgt5ptrdqjimlob1.jpg", color: nil}
])

UserCollection.create!([
  {user_id: 2, collection_id: 2, x: -2.44, y: 1011.9, width: 1280, height: 720, angle: 0.0, scale: 1.17, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559251739/collections/movies.jpg", color: "#000", zindex: 0},
  {user_id: 3, collection_id: 1, x: -153.0, y: -383.0, width: 1920, height: 1280, angle: 0.253, scale: 0.725, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558926002/collections/music.jpg", color: "#533323", zindex: 0},
  {user_id: 3, collection_id: 3, x: -1829.5, y: 293.5, width: 1280, height: 853, angle: -0.12, scale: 0.95, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558928371/collections/books.jpg", color: "#1d1612", zindex: 0},
  {user_id: 4, collection_id: 1, x: -153.0, y: -383.0, width: 1920, height: 1280, angle: 0.253, scale: 0.725, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558926002/collections/music.jpg", color: "#533323", zindex: 0},
  {user_id: 4, collection_id: 2, x: -2.44, y: 1011.9, width: 1280, height: 720, angle: 0.0, scale: 1.17, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559251739/collections/movies.jpg", color: "#000", zindex: 0},
  {user_id: 4, collection_id: 3, x: -1829.5, y: 293.5, width: 1280, height: 853, angle: -0.12, scale: 0.95, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558928371/collections/books.jpg", color: "#1d1612", zindex: 0},
  {user_id: 5, collection_id: 1, x: -153.0, y: -383.0, width: 1920, height: 1280, angle: 0.253, scale: 0.725, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558926002/collections/music.jpg", color: "#533323", zindex: 0},
  {user_id: 5, collection_id: 2, x: -2.44, y: 1011.9, width: 1280, height: 720, angle: 0.0, scale: 1.17, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559251739/collections/movies.jpg", color: "#000", zindex: 0},
  {user_id: 5, collection_id: 3, x: -1829.5, y: 293.5, width: 1280, height: 853, angle: -0.12, scale: 0.95, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558928371/collections/books.jpg", color: "#1d1612", zindex: 0},
  {user_id: 6, collection_id: 1, x: -153.0, y: -383.0, width: 1920, height: 1280, angle: 0.253, scale: 0.725, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558926002/collections/music.jpg", color: "#533323", zindex: 0},
  {user_id: 6, collection_id: 2, x: -2.44, y: 1011.9, width: 1280, height: 720, angle: 0.0, scale: 1.17, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559251739/collections/movies.jpg", color: "#000", zindex: 0},
  {user_id: 6, collection_id: 3, x: -1829.5, y: 293.5, width: 1280, height: 853, angle: -0.12, scale: 0.95, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558928371/collections/books.jpg", color: "#1d1612", zindex: 0},
  {user_id: 7, collection_id: 1, x: -153.0, y: -383.0, width: 1920, height: 1280, angle: 0.253, scale: 0.725, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558926002/collections/music.jpg", color: "#533323", zindex: 0},
  {user_id: 7, collection_id: 2, x: -2.44, y: 1011.9, width: 1280, height: 720, angle: 0.0, scale: 1.17, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559251739/collections/movies.jpg", color: "#000", zindex: 0},
  {user_id: 7, collection_id: 3, x: -1829.5, y: 293.5, width: 1280, height: 853, angle: -0.12, scale: 0.95, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558928371/collections/books.jpg", color: "#1d1612", zindex: 0},
  {user_id: 8, collection_id: 1, x: -153.0, y: -383.0, width: 1920, height: 1280, angle: 0.253, scale: 0.725, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558926002/collections/music.jpg", color: "#533323", zindex: 0},
  {user_id: 8, collection_id: 2, x: -2.44, y: 1011.9, width: 1280, height: 720, angle: 0.0, scale: 1.17, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559251739/collections/movies.jpg", color: "#000", zindex: 0},
  {user_id: 8, collection_id: 3, x: -1829.5, y: 293.5, width: 1280, height: 853, angle: -0.12, scale: 0.95, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558928371/collections/books.jpg", color: "#1d1612", zindex: 0},
  {user_id: 9, collection_id: 1, x: -153.0, y: -383.0, width: 1920, height: 1280, angle: 0.253, scale: 0.725, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558926002/collections/music.jpg", color: "#533323", zindex: 0},
  {user_id: 9, collection_id: 2, x: -2.44, y: 1011.9, width: 1280, height: 720, angle: 0.0, scale: 1.17, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559251739/collections/movies.jpg", color: "#000", zindex: 0},
  {user_id: 9, collection_id: 3, x: -1829.5, y: 293.5, width: 1280, height: 853, angle: -0.12, scale: 0.95, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558928371/collections/books.jpg", color: "#1d1612", zindex: 0},
  {user_id: 2, collection_id: 3, x: -2072.72039682354, y: 233.935821186074, width: 1280, height: 853, angle: -0.12, scale: 0.95, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558928371/collections/books.jpg", color: "#1d1612", zindex: 0},
  {user_id: 2, collection_id: 4, x: -1506.76670154511, y: 1467.28361514255, width: 1280, height: 853, angle: 0.0, scale: 0.866386061119215, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560213773/collections/za3ga0k2w8q8sezdh968.jpg", color: "#2e2d2e", zindex: nil},
  {user_id: 11, collection_id: 1, x: -153.0, y: -383.0, width: 1920, height: 1280, angle: 0.253, scale: 0.725, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558926002/collections/music.jpg", color: "#533323", zindex: 0},
  {user_id: 11, collection_id: 2, x: -2.44, y: 1011.9, width: 1280, height: 720, angle: 0.0, scale: 1.17, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559251739/collections/movies.jpg", color: "#000", zindex: 0},
  {user_id: 11, collection_id: 3, x: -1829.5, y: 293.5, width: 1280, height: 853, angle: -0.12, scale: 0.95, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558928371/collections/books.jpg", color: "#1d1612", zindex: 0},
  {user_id: 3, collection_id: 2, x: -17.3713831018517, y: 1011.9, width: 1280, height: 720, angle: 0.0, scale: 1.17, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559251739/collections/movies.jpg", color: "#000", zindex: 0},
  {user_id: 2, collection_id: 1, x: -245.520958538182, y: -335.095551360428, width: 1920, height: 1280, angle: 0.203367455854704, scale: 0.722929630392038, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558926002/collections/music.jpg", color: "#533323", zindex: nil},
  {user_id: 3, collection_id: 4, x: -1481.87483416313, y: -603.486713454959, width: 1280, height: 853, angle: 0.0, scale: 0.326856751117608, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560213773/collections/za3ga0k2w8q8sezdh968.jpg", color: "#2e2d2e", zindex: nil},
  {user_id: 10, collection_id: 1, x: -153.0, y: -383.0, width: 1920, height: 1280, angle: 0.253, scale: 0.725, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558926002/collections/music.jpg", color: "#533323", zindex: 0},
  {user_id: 10, collection_id: 2, x: -2.44, y: 1011.9, width: 1280, height: 720, angle: 0.0, scale: 1.17, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559251739/collections/movies.jpg", color: "#000", zindex: 0},
  {user_id: 10, collection_id: 3, x: -1829.5, y: 293.5, width: 1280, height: 853, angle: -0.12, scale: 0.95, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1558928371/collections/books.jpg", color: "#1d1612", zindex: 0}
])

UserRecord.create!({record_id: 2, name: "The Matrix", description: "Set in the 22nd century, The Matrix tells the story of a computer hacker who joins a group of underground insurgents fighting the vast and powerful computers who now rule the earth.", user_collection_id: 2, x: 1819.64275124458, y: 739.848374636247, width: 300, height: 450, angle: 0.0, scale: 2.00780500444921, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559765964/records/xxbr97y38xtya8pnlbwc.jpg", color: "#4b575e", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 1, name: "The Dark Knight", description: "Batman raises the stakes in his war on crime. With the help of Lt. Jim Gordon and District Attorney Harvey Dent, Batman sets out to dismantle the remaining criminal organizations that plague the streets. The partnership proves to be effective, but they soon find themselves prey to a reign of chaos unleashed by a rising criminal mastermind known to the terrified citizens of Gotham as the Joker.", user_collection_id: 2, x: 888.0, y: 805.0, width: 300, height: 450, angle: 0.0, scale: 1.47695000159853, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559765947/records/ivjliiv1ieef8pk3akfn.jpg", color: "#2a3c4c", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 6, name: "The Princess Bride", description: "In this enchantingly cracked fairy tale, the beautiful Princess Buttercup and the dashing Westley must overcome staggering odds to find happiness amid six-fingered swordsmen, murderous princes, Sicilians and rodents of unusual size. But even death can't stop these true lovebirds from triumphing.", user_collection_id: 2, x: 2685.42899903422, y: 1836.83553234513, width: 300, height: 450, angle: 0.0, scale: 2.7525049345289, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559767152/records/ief0sl40pja2mvlxkuvq.jpg", color: "#57606b", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 1, name: "The Dark Knight", description: "Batman raises the stakes in his war on crime. With the help of Lt. Jim Gordon and District Attorney Harvey Dent, Batman sets out to dismantle the remaining criminal organizations that plague the streets. The partnership proves to be effective, but they soon find themselves prey to a reign of chaos unleashed by a rising criminal mastermind known to the terrified citizens of Gotham as the Joker.", user_collection_id: 5, x: 920.805664046202, y: 796.093544411326, width: 300, height: 450, angle: -0.249654274709972, scale: 1.93583887529601, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559765947/records/ivjliiv1ieef8pk3akfn.jpg", color: "#2a3c4c", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 3, name: "Fight Club", description: "A ticking-time-bomb insomniac and a slippery soap salesman channel primal male aggression into a shocking new form of therapy. Their concept catches on, with underground ", user_collection_id: 2, x: 1128.26540958053, y: -129.074217291572, width: 300, height: 450, angle: 0.0, scale: 1.17978946153011, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559766021/records/ev1klxkjanfeb2hspuxb.jpg", color: "#816037", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 4, name: "Made", description: "Two aspiring boxers lifelong friends get involved in a money-laundering scheme through a low-level organized crime group.", user_collection_id: 2, x: 2285.38341760919, y: 424.24237834588, width: 300, height: 450, angle: 0.0, scale: 0.60823007249023, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559767018/records/k6m6hg3p8ontgerekwml.jpg", color: "#432922", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 5, name: "Kiss Kiss Bang Bang", description: "A petty thief posing as an actor is brought to Los Angeles for an unlikely audition and finds himself in the middle of a murder investigation along with his high school dream girl and a detective who's been training him for his upcoming role...", user_collection_id: 2, x: 2901.68200035992, y: 322.055082386518, width: 300, height: 450, angle: 0.0, scale: 2.66775850887407, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559767063/records/mhjxeph0qhuxbxvnrsra.jpg", color: "#a896aa", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 7, name: "Il buono, il brutto, il cattivo", description: "While the Civil War rages between the Union and the Confederacy, three men – a quiet loner, a ruthless hit man and a Mexican bandit – comb the American Southwest in search of a strongbox containing $200,000 in stolen gold.", user_collection_id: 2, x: 1423.36745878243, y: 1972.47593237673, width: 300, height: 450, angle: 0.0, scale: 2.39013610062584, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559767187/records/usngvyja0wxqfqsfnlb2.jpg", color: "#7f736d", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 8, name: "Primer", description: "Friends and fledgling entrepreneurs invent a device in their garage which reduces the apparent mass of any object placed inside it, but they discover that it has some highly unexpected capabilities - ones that could enable them to do and to have seemingly anything they want. Taking advantage of this unique opportunity is the first challenge they face. Dealing with the consequences is the next.", user_collection_id: 2, x: 3884.64812804303, y: 1013.50695381935, width: 300, height: 450, angle: 0.0, scale: 2.4151226731233, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559770524/records/dsvhbrmpryfi6dzjcz50.jpg", color: "#373731", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 9, name: "Good Omens", description: "", user_collection_id: 3, x: 888.0, y: 801.0, width: 180, height: 306, angle: 0.0, scale: 2.46666666666667, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559770553/records/bbxxqomnfuen7eq05gb1.jpg", color: nil, zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 10, name: "Made to stick", description: "", user_collection_id: 3, x: 1558.60772104608, y: 638.163138231631, width: 180, height: 274, angle: 0.0, scale: 2.15948526359486, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559770606/records/a8u1vz2cmwwjfzcqdilp.jpg", color: "#b8451f", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 11, name: "菊次郎の夏", description: "Brash, loudmouthed and opportunistic, Kikujiro is the unlikely companion for Masao who is determined to see the mother he has never met. The two begin a series of adventures which soon turns out to be a whimsical journey of laughter and tears with a wide array of surprises and unique characters along the way.", user_collection_id: 2, x: 3584.83321996668, y: 2261.62192246676, width: 300, height: 450, angle: 0.0, scale: 2.15790294563882, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559770667/records/jqplsxajq1d6pxzrsaaj.jpg", color: "#e4e2e0", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 12, name: "Dookie", description: "Green Day", user_collection_id: 27, x: 1695.22487128575, y: 939.755242031763, width: 500, height: 500, angle: 0.0, scale: 1.60607576947961, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559831728/records/tsilwwclzmntxefqvloi.png", color: nil, zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 13, name: "Pinkerton", description: "Weezer", user_collection_id: 27, x: 2874.92576386779, y: 912.987312540436, width: 1500, height: 1500, angle: 0.0, scale: 0.535358589826536, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559831772/records/vwwg0rjfgjm5lci6w9dt.jpg", color: "#524a37", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 14, name: "TRON: Legacy", description: "Daft Punk", user_collection_id: 27, x: 2242.57323389374, y: -276.23766333124, width: 500, height: 500, angle: 0.0, scale: 1.90913082000413, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559855366/records/qgcixzbnjzmirdnxom2y.jpg", color: "#60f12", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 15, name: "Honky Château", description: "Elton John", user_collection_id: 27, x: 1103.86206367464, y: -126.340256275097, width: 1400, height: 1400, angle: 0.0, scale: 0.402061000418153, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559916417/records/gidkwfogjcixqm8e2hmf.jpg", color: "#b3a372", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 16, name: "Not So Commercial", description: "Los Amigos Invisibles", user_collection_id: 27, x: 3323.11872978549, y: -277.56584331333, width: 200, height: 200, angle: 0.0, scale: 3.291977350768, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559917146/records/hdsfxpzdldxpeafvqamo.jpg", color: "#968c5c", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 17, name: "Rocketman", description: "The story of Elton John's life, from his years as a prodigy at the Royal Academy of Music through his influential and enduring musical partnership with Bernie Taupin.", user_collection_id: 2, x: 3939.93900352013, y: -243.394693241644, width: 300, height: 450, angle: 0.0, scale: 1.64624473390174, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1559926831/records/bszrqxvkicvlatjyqku4.jpg", color: "#293c51", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 22, name: "功夫", description: "Set in Canton, China in the 1940s, the story revolves in a town ruled by the Axe Gang, Sing who desperately wants to become a member. He stumbles into a slum ruled by eccentric landlords who turns out to be the greatest kung-fu masters in disguise. Sing's actions eventually cause the Axe Gang and the slumlords to engage in an explosive kung-fu battle. Only one side will win and only one hero will emerge as the greatest kung-fu master of all.", user_collection_id: 2, x: 1913.2489643332, y: -563.57285354924, width: 300, height: 450, angle: 0.0, scale: 2.40481753423065, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560299688/records/trlckrtxcpcg0dijskjp.jpg", color: "#984e24", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 23, name: "American Idiot", description: "Green Day", user_collection_id: 27, x: 563.810772416544, y: 1317.56096758321, width: 1448, height: 1448, angle: 0.0, scale: 0.692280371840038, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560350691/records/ju8x7qhw0lpw71te2eib.jpg", color: "#55454e", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 24, name: "Mellon Collie and the Infinite Sadness", description: "The Smashing Pumpkins", user_collection_id: 27, x: 3809.81231863405, y: 730.992218536231, width: 600, height: 600, angle: 0.0, scale: 1.09214914327908, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560353167/records/wp0xdo3agzrncfox1hbt.jpg", color: "#5c6468", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 41, name: "Modern JavaScript Explained For Dinosaurs", description: "![Dinosaur comic panel 1](https://cdn-images-1.medium.com/max/1600/1*H8PH-HaV43gZyBJz0mJHxA.png)\r\n\r\nLearning modern JavaScript is tough if you haven't been there since the beginning. The ecosystem is growing and changing so rapidly that it's hard to understand the problems that different tools are trying to solve. I started programming in 1998 but only began to learn JavaScript seriously in 2014. At the time I remember coming across Browserify and staring at its tagline:\r\n\r\n> \"Browserify lets you require('modules') in the browser by bundling up all of your dependencies.\"\r\n\r\nI pretty much didn't understand any word in this sentence, and struggled to make sense of how this would be helpful for me as a developer.\r\n\r\nThe goal of this article is to provide a historical context of how JavaScript tools have evolved to what they are today in 2017. We'll start from the beginning and build an example website like the dinosaurs did - no tools, just plain HTML and JavaScript. Then we'll introduce different tools incrementally to see the problems that they solve one at a time. With this historical context, you'll be better able to learn and adapt to the ever-changing JavaScript landscape going forward. Let's get started!\r\n\r\n### Using JavaScript the \"old-school\" way\r\nLet's start with an \"old-school\" website using HTML and JavaScript, which involves manually downloading and linking files. Here's a simple index.html file that links to a JavaScript file:\r\n\r\n```\r\n<!-- index.html -->\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>JavaScript Example</title>\r\n  <script src=\"index.js\"></script>\r\n</head>\r\n<body>\r\n  <h1>Hello from HTML!</h1>\r\n</body>\r\n</html>\r\n```\r\n\r\nThe line `<script src=\"index.js\"></script>` refers to a separate JavaScript file in the same directory named index.js:\r\n\r\n```\r\n// index.js\r\nconsole.log(\"Hello from JavaScript!\");\r\n```\r\n\r\nThis is all you need to make a website! Now let's say you wanted to add a library someone else wrote like moment.js (a library which can help format dates in a human readable way). For example, you can use the moment function in JavaScript as follows:\r\n\r\n```\r\nmoment().startOf('day').fromNow();        // 20 hours ago\r\n```\r\n\r\nBut this is only assuming you include moment.js on your website! On the homepage for moment.js you see the following instructions:\r\n\r\n![Moment.js installation instructions](https://cdn-images-1.medium.com/max/1600/1*ef7OX37jr--Jc38ZxO97Iw.png)\r\n\r\nHmm, there's a lot of stuff going in the Install section on the right. But let's ignore that for now - we can add moment.js to our website by downloading the moment.min.js file in the same directory and including it in our index.html file.\r\n\r\n```\r\n<!-- index.html -->\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Example</title>\r\n  <link rel=\"stylesheet\" href=\"index.css\">\r\n  <script src=\"moment.min.js\"></script>\r\n  <script src=\"index.js\"></script>\r\n</head>\r\n<body>\r\n  <h1>Hello from HTML!</h1>\r\n</body>\r\n</html>\r\n```\r\n\r\nNote that moment.min.js gets loaded before index.js, which means you can use the moment function in index.js as follows:\r\n\r\n```\r\n// index.js\r\nconsole.log(\"Hello from JavaScript!\");\r\nconsole.log(moment().startOf('day').fromNow());\r\n```\r\n\r\nAnd this is how we used to make websites with JavaScript libraries! The good thing was that it was easy enough to understand. The bad thing was that it was annoying to find and download new versions of libraries every time they would update.\r\n\r\n### Using a JavaScript package manager (npm)\r\nStarting around 2010, several competing JavaScript package managers emerged to help automate the process of downloading and upgrading libraries from a central repository. Bower was arguably the most popular in 2013, but eventually was overtaken by npm around 2015. (It's worth noting that starting around late 2016, yarn has picked up a lot of traction as an alternative to npm's interface, but it still uses npm packages under the hood.)\r\nNote that npm was originally a package manager made specifically for node.js, a JavaScript runtime designed to run on the server, not the frontend. So that makes it a pretty weird choice for a frontend JavaScript package manager for libraries meant to run in a browser.\r\n\r\n> Note: Using package managers generally involves using a command line, which in the past was never required as a frontend dev. If you've never used one, you can read this tutorial to get a good overview to get started. For better or for worse, knowing how to use the command line is an important part of modern JavaScript (and it opens up doors in other areas of development as well).\r\n\r\nLet's look at how to use npm to install the moment.js package automatically instead of manually downloading it. If you have node.js installed, you already have npm installed, which means you can navigate your command line to the folder with your index.html file and enter:\r\n\r\n```\r\n$ npm init\r\n```\r\n\r\nThis will prompt you with several questions (the defaults are fine, you can hit \"Enter\" for each question) and generate a new file named package.json. This is a configuration file that npm uses to save all project information. With the defaults the contents of package.json should look something like:\r\n\r\n```\r\n{\r\n  \"name\": \"your-project-name\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\"\r\n}\r\n```\r\n\r\nTo install the moment.js JavaScript package, we can now follow the npm instructions from their home page by entering the following command in the command line:\r\n\r\n```\r\n$ npm install moment --save\r\n```\r\n\r\nThis command does two things - first, it downloads all the code from the moment.js package into a folder called node_modules. Second, it automatically modifies the package.json file to keep track of moment.js as a project dependency.\r\n\r\n```\r\n{\r\n  \"name\": \"modern-javascript-example\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"moment\": \"^2.22.2\"\r\n  }\r\n}\r\n```\r\n\r\nThis is useful later when sharing a project with others - instead of sharing the node_modules folder (which can get very large), you only need to share the package.json file and other developers can install the required packages automatically with the command npm install.\r\n\r\nSo now we no longer have to manually download moment.js from the website, we can automatically download and update it using npm. Looking inside the node_modules folder, we can see the moment.min.js file in the node_modules/moment/min directory. This means we can link to the npm downloaded version of moment.min.js in the index.html file as follows:\r\n\r\n```\r\n<!-- index.html -->\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>JavaScript Example</title>\r\n  <script src=\"node_modules/moment/min/moment.min.js\"></script>\r\n  <script src=\"index.js\"></script>\r\n</head>\r\n<body>\r\n  <h1>Hello from HTML!</h1>\r\n</body>\r\n</html>\r\n```\r\n\r\nSo the good thing is that we can now use npm to download and update our packages through the command line. The bad thing is right now we're digging through the node_modules folder to find the location of each package and manually including it in our HTML. That's pretty inconvenient, so next we'll take a look at how to automate that process as well.\r\n\r\n![Dinosaur comic panel 2](https://cdn-images-1.medium.com/max/1600/1*GeEETvRqyG4o7SZdbU2Guw.png)\r\n\r\n### Using a JavaScript module bundler (webpack)\r\nMost programming languages provide a way to import code from one file into another. JavaScript wasn't originally designed with this feature, because JavaScript was designed to only run in the browser, with no access to the file system of the client's computer (for security reasons). So for the longest time, organizing JavaScript code in multiple files required you to load each file with variables shared globally.\r\n\r\nThis is actually what we're doing with the above moment.js example - the entire moment.min.js file is loaded in the HTML, which defines a global variable moment, which is then available to any file loaded after moment.min.js (regardless of whether or not it needs access to it).\r\n\r\nIn 2009, a project named CommonJS was started with the goal of specifying an ecosystem for JavaScript outside the browser. A big part of CommonJS was its specification for modules, which would finally allow JavaScript to import and export code across files like most programming languages, without resorting to global variables. The most well-known of implementation of CommonJS modules is node.js.\r\n\r\n![Node.js logo](https://cdn-images-1.medium.com/max/1600/1*xeF1flp1zDLLJ4j7rDQ6-Q.png)\r\n\r\nAs mentioned earlier, node.js is a JavaScript runtime designed to run on the server. Here's what the earlier example would look like using node.js modules. Instead of loading all of moment.min.js with an HTML script tag, you can load it directly in the JavaScript file as follows:\r\n\r\n```\r\n// index.js\r\nvar moment = require('moment');\r\nconsole.log(\"Hello from JavaScript!\");\r\nconsole.log(moment().startOf('day').fromNow());\r\n```\r\n\r\nAgain, this is how module loading works in node.js, which works great since node.js is a server side language with access to the computer's file system. Node.js also knows the location of each npm module path, so instead of having to write `require('./node_modules/moment/min/moment.min.js)`, you can simply write `require('moment')` -  pretty sweet.\r\n\r\nThis is all great for node.js, but if you tried to use the above code in the browser, you'd get an error saying require is not defined. The browser doesn't have access to the file system, which means loading modules in this way is very tricky - loading files has to be done dynamically, either synchronously (which slows down execution) or asynchronously (which can have timing issues).\r\n\r\nThis is where a module bundler comes in. A JavaScript module bundler is a tool that gets around the problem with a build step (which has access to the file system) to create a final output that is browser compatible (which doesn't need access to the file system). In this case, we need a module bundler to find all require statements (which is invalid browser JavaScript syntax) and replace them with the actual contents of each required file. The final result is a single bundled JavaScript file (with no require statements)!\r\n\r\nThe most popular module bundler was Browserify, which was released in 2011 and pioneered the usage of node.js style require statements on the frontend (which is essentially what enabled npm to become the frontend package manager of choice). Around 2015, webpack eventually became the more widely used module bundler (fueled by the popularity of the React frontend framework, which took full advantage of webpack's various features).\r\n\r\nLet's take a look at how to use webpack to get the above require('moment') example working in the browser. First we need to install webpack into the project. Webpack itself is an npm package, so we can install it from the command line:\r\n\r\n```\r\n$ npm install webpack webpack-cli --save-dev\r\n```\r\n\r\nNote that we're installing two packages - webpack and webpack-cli (which enables you to use webpack from the command line). Also note the --save-dev argument - this saves it as a development dependency, which means it's a package that you need in your development environment but not on your production server. You can see this reflected in the package.json file, which was automatically updated:\r\n\r\n```\r\n{\r\n  \"name\": \"modern-javascript-example\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"moment\": \"^2.19.1\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"webpack\": \"^4.17.1\",\r\n    \"webpack-cli\": \"^3.1.0\"\r\n  }\r\n}\r\n```\r\n\r\nNow we have webpack and webpack-cli installed as packages in the node_modules folder. You can use webpack-cli from the command line as follows:\r\n\r\n```\r\n$ ./node_modules/.bin/webpack index.js --mode=development\r\n```\r\n\r\nThis command will run the webpack tool that was installed in the node_modules folder, start with the index.js file, find any require statements, and replace them with the appropriate code to create a single output file (which by default is dist/main.js). The `--mode=development` argument is to keep the JavaScript readable for developers, as opposed to a minified output with the argument `--mode=production`.\r\n\r\nNow that we have webpack's dist/main.js output, we are going to use it instead of index.js in the browser, as it contains invalid require statements. This would be reflected in the index.html file as follows:\r\n\r\n```\r\n<!-- index.html -->\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>JavaScript Example</title>\r\n  <script src=\"dist/main.js\"></script>\r\n</head>\r\n<body>\r\n  <h1>Hello from HTML!</h1>\r\n</body>\r\n</html>\r\n```\r\n\r\nIf you refresh the browser, you should see that everything is working as before!\r\n\r\nNote that we'll need to run the webpack command each time we change index.js. This is tedious, and will get even more tedious as we use webpack's more advanced features (like generating source maps to help debug the original code from the transpiled code). Webpack can read options from a config file in the root directory of the project named webpack.config.js, which in our case would look like:\r\n\r\n```\r\n// webpack.config.js\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: './index.js',\r\n  output: {\r\n    filename: 'main.js',\r\n    publicPath: 'dist'\r\n  }\r\n};\r\n```\r\n\r\nNow each time we change index.js, we can run webpack with the command:\r\n\r\n```\r\n$ ./node_modules/.bin/webpack\r\n```\r\n\r\nWe don't need to specify the `index.js` and `--mode=development` options anymore, since webpack is loading those options from the `webpack.config.js` file. This is better, but it's still tedious to enter this command for each code change - we'll make this process smoother in a bit.\r\n\r\nOverall, this may not seem like much, but there are some huge advantages to this workflow. We are no longer loading external scripts via global variables. Any new JavaScript libraries will be added using require statements in the JavaScript, as opposed to adding new `<script>` tags in the HTML. Having a single JavaScript bundle file is often better for performance. And now that we added a build step, there are some other powerful features we can add to our development workflow!\r\n\r\n![Dinosaur comic panels 3 and 4](https://cdn-images-1.medium.com/max/1600/1*ee_ivxNTKgIJTjmEMC4-dg.png)\r\n\r\n### Transpiling code for new language features (babel)\r\nTranspiling code means converting the code in one language to code in another similar language. This is an important part of frontend development - since browsers are slow to add new features, new languages were created with experimental features that transpile to browser compatible languages.\r\nFor CSS, there's Sass, Less, and Stylus, to name a few. For JavaScript, the most popular transpiler for a while was CoffeeScript (released around 2010), whereas nowadays most people use babel or TypeScript. CoffeeScript is a language focused on improving JavaScript by significantly changing the language - optional parentheses, significant whitespace, etc. Babel is not a new language but a transpiler that transpiles next generation JavaScript with features not yet available to all browsers (ES2015 and beyond) to older more compatible JavaScript (ES5). Typescript is a language that is essentially identical to next generation JavaScript, but also adds optional static typing. Many people choose to use babel because it's closest to vanilla JavaScript.\r\n\r\nLet's look at an example of how to use babel with our existing webpack build step. First we'll install babel (which is an npm package) into the project from the command line:\r\n\r\n```\r\n$ npm install @babel/core @babel/preset-env babel-loader --save-dev\r\n```\r\n\r\nNote that we're installing 3 separate packages as dev dependencies - @babel/core is the main part of babel, @babel/preset-env is a preset defining which new JavaScript features to transpile, and babel-loader is a package to enable babel to work with webpack. We can configure webpack to use babel-loader by editing the webpack.config.js file as follows:\r\n\r\n```\r\n// webpack.config.js\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: './index.js',\r\n  output: {\r\n    filename: 'main.js',\r\n    publicPath: 'dist'\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.js$/,\r\n        exclude: /node_modules/,\r\n        use: {\r\n          loader: 'babel-loader',\r\n          options: {\r\n            presets: ['@babel/preset-env']\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  }\r\n};\r\n```\r\n\r\nThis syntax can be confusing (fortunately it's not something we'll be editing often). Basically we're telling webpack to look for any .js files (excluding ones in the node_modules folder) and apply babel transpilation using babel-loader with the @babel/preset-env preset. You can read more about webpack configuration syntax here.\r\n\r\nNow that everything's set up, we can start writing ES2015 features in our JavaScript! Here's an example of an ES2015 template string in the index.js file:\r\n\r\n```\r\n// index.js\r\nvar moment = require('moment');\r\nconsole.log(\"Hello from JavaScript!\");\r\nconsole.log(moment().startOf('day').fromNow());\r\nvar name = \"Bob\", time = \"today\";\r\nconsole.log(`Hello ${name}, how are you ${time}?`);\r\n```\r\n\r\nWe can also use the ES2015 import statement instead of require for loading modules, which is what you'll see in a lot of codebases today:\r\n\r\n```\r\n// index.js\r\nimport moment from 'moment';\r\nconsole.log(\"Hello from JavaScript!\");\r\nconsole.log(moment().startOf('day').fromNow());\r\nvar name = \"Bob\", time = \"today\";\r\nconsole.log(`Hello ${name}, how are you ${time}?`);\r\n```\r\n\r\nIn this example, the import syntax isn't much different from the require syntax, but import has extra flexibility for more advanced cases. Since we changed index.js, we need to run webpack again in the command line:\r\n\r\n```\r\n$ ./node_modules/.bin/webpack\r\n```\r\n\r\nNow you can refresh index.html in the browser. At the time of this writing, most modern browsers support all ES2015 features, so it can be hard to tell if babel did its job. You can test it in an older browser like IE9, or you can search in main.js to find the line of transpiled code:\r\n\r\n```\r\n// main.js\r\n// ...\r\nconsole.log('Hello ' + name + ', how are you ' + time + '?');\r\n// ...\r\n```\r\n\r\nHere you can see babel transpiled the ES2015 template string into regular JavaScript string concatenation to maintain browser compatibility. While this particular example may not be too exciting, the ability to transpile code is a very powerful one. There are some exciting language features coming to JavaScript like async/await that you can start using today to write better code. And while transpilation may at times seem tedious and painful, it has led to a dramatic improvement of the language in the past few years, as people are testing out tomorrow's features today.\r\n\r\nWe're almost done, but there's still some unpolished edges in our workflow. If we're concerned about performance, we should be minifying the bundle file, which should be easy enough since we're already incorporating a build step. We also need to re-run the webpack command each time we change the JavaScript, which gets old real fast. So the next thing we'll look at are some convenience tools to solve these issues.\r\n\r\n### Using a task runner (npm scripts)\r\nNow that we're invested in using a build step to work with JavaScript modules, it makes sense to use a task runner, which is a tool that automates different parts of the build process. For frontend development, tasks include minifying code, optimizing images, running tests, etc.\r\nIn 2013, Grunt was the most popular frontend task runner, with Gulp following shortly after. Both rely on plugins that wrap other command line tools. Nowadays the most popular choice seems to be using the scripting capabilities built into the npm package manager itself, which doesn't use plugins but instead works with other command line tools directly.\r\n\r\nLet's write some npm scripts to make using webpack easier. This involves simply changing the package.json file as follows:\r\n\r\n```\r\n{\r\n  \"name\": \"modern-javascript-example\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"build\": \"webpack --progress --mode=production\",\r\n    \"watch\": \"webpack --progress --watch\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"moment\": \"^2.22.2\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.0.0\",\r\n    \"@babel/preset-env\": \"^7.0.0\",\r\n    \"babel-loader\": \"^8.0.2\",\r\n    \"webpack\": \"^4.17.1\",\r\n    \"webpack-cli\": \"^3.1.0\"\r\n  }\r\n}\r\n```\r\n\r\nHere we've added two new scripts, build and watch. To run the build script, you can enter in the command line:\r\n\r\n```\r\n$ npm run build\r\n```\r\n\r\nThis will run webpack (using configuration from the webpack.config.js we made earlier) with the --progress option to show the percent progress and the --mode=production option to minimize the code for production. To run the watch script:\r\n\r\n```\r\n$ npm run watch\r\n```\r\n\r\nThis uses the --watch option instead to automatically re-run webpack each time any JavaScript file changes, which is great for development.\r\nNote that the scripts in package.json can run webpack without having to specify the full path ./node_modules/.bin/webpack, since node.js knows the location of each npm module path. This is pretty sweet! We can make things even sweeter by installing webpack-dev-server, a separate tool which provides a simple web server with live reloading. To install it as a development dependency, enter the command:\r\n\r\n```\r\n$ npm install webpack-dev-server --save-dev \r\n```\r\n\r\nThen add an npm script to package.json:\r\n\r\n```\r\n{\r\n  \"name\": \"modern-javascript-example\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"index.js\",\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"build\": \"webpack --progress -p\",\r\n    \"watch\": \"webpack --progress --watch\",\r\n    \"server\": \"webpack-dev-server --open\"\r\n  },\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"moment\": \"^2.19.1\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.0.0\",\r\n    \"@babel/preset-env\": \"^7.0.0\",\r\n    \"babel-loader\": \"^8.0.2\",\r\n    \"webpack\": \"^3.7.1\",\r\n    \"webpack-dev-server\": \"^3.1.6\"\r\n  }\r\n}\r\n```\r\n\r\nNow you can start your dev server by running the command:\r\n\r\n```\r\n$ npm run server\r\n```\r\n\r\nThis will automatically open the index.html website in your browser with an address of localhost:8080 (by default). Any time you change your JavaScript in index.js, webpack-dev-server will rebuild its own bundled JavaScript and refresh the browser automatically. This is a surprisingly useful time saver, as it allows you to keep your focus on the code instead of having to continually switch contexts between the code and the browser to see new changes.\r\nThis is only scratching the surface, there are plenty more options with both webpack and webpack-dev-server (which you can read about here). You can of course make npm scripts for running other tasks as well, such as converting Sass to CSS, compressing images, running tests - anything that has a command line tool is fair game. There are also some great advanced options and tricks with npm scripts themselves - this talk by Kate Hudson is a great place to start:\r\n\r\n<div style=\"--aspect-ratio: 16/9;\">\r\n\t<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0RYETb9YVrk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n</div>\r\n\r\n### Conclusion\r\nSo this is modern JavaScript in a nutshell. We went from plain HTML and JS to using a package manager to automatically download 3rd party packages, a module bundler to create a single script file, a transpiler to use future JavaScript features, and a task runner to automate different parts of the build process. Definitely a lot of moving pieces here, especially for beginners. Web development used to be a great entry point for people new to programming precisely because it was so easy to get up and running; nowadays it can be quite daunting, especially because the various tools tend to change rapidly.\r\nStill, it's not as bad as it seems. Things are settling down, particularly with the adoption of the node ecosystem as a viable way to work with the frontend. It's nice and consistent to use npm as a package manager, node require or import statements for modules, and npm scripts for running tasks. This is a vastly simplified workflow compared to even a year or two ago!\r\n\r\nEven better for beginners and experienced developers alike is that frameworks these days often come with tools to make the process easier to get started. Ember has ember-cli, which was hugely influential on Angular's angular-cli, React's create-react-app, Vue's vue-cli, etc. All these tools will set up a project with everything you need - all you need to do is start writing code. However, these tools aren't magic, they simply set everything up in a consistent and working fashion - you may often get to a point where you need to do some extra configuration with webpack, babel, etc. So it's still very critical to understand what each piece does as we've covered in this article.\r\n\r\nModern JavaScript can definitely be frustrating to work with as it continues to change and evolve at a rapid pace. But even though it may seem at times like re-inventing the wheel, JavaScript's rapid evolution has helped push innovations such as hot reloading, real-time linting, and time-travel debugging. It's an exciting time to be a developer, and I hope this information can serve as a roadmap to help you on your journey!\r\n\r\n![Dinosaur comic panel 5](https://cdn-images-1.medium.com/max/1600/1*H6NN_RxZNeVyLYpCirsslg.png)\r\n\r\n*Special thanks to @ryanqnorth's Dinosaur Comics, which has served up some of the finest absurdist humor since 2003 (when dinosaurs ruled the web).*", user_collection_id: 28, x: 1017.17624651777, y: 1069.74625067803, width: 1400, height: 910, angle: 0.0, scale: 0.166859707975641, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1564074033/records/bioyi5fxj0rnz8g17u4w.png", color: "#c7dcbb", zindex: nil, rendered_description: "<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*H8PH-HaV43gZyBJz0mJHxA.png\" alt=\"Dinosaur comic panel 1\"></p>\n\n<p>Learning modern JavaScript is tough if you haven&#39;t been there since the beginning. The ecosystem is growing and changing so rapidly that it&#39;s hard to understand the problems that different tools are trying to solve. I started programming in 1998 but only began to learn JavaScript seriously in 2014. At the time I remember coming across Browserify and staring at its tagline:</p>\n\n<blockquote>\n<p>&quot;Browserify lets you require(&#39;modules&#39;) in the browser by bundling up all of your dependencies.&quot;</p>\n</blockquote>\n\n<p>I pretty much didn&#39;t understand any word in this sentence, and struggled to make sense of how this would be helpful for me as a developer.</p>\n\n<p>The goal of this article is to provide a historical context of how JavaScript tools have evolved to what they are today in 2017. We&#39;ll start from the beginning and build an example website like the dinosaurs did - no tools, just plain HTML and JavaScript. Then we&#39;ll introduce different tools incrementally to see the problems that they solve one at a time. With this historical context, you&#39;ll be better able to learn and adapt to the ever-changing JavaScript landscape going forward. Let&#39;s get started!</p>\n\n<h3>Using JavaScript the &quot;old-school&quot; way</h3>\n\n<p>Let&#39;s start with an &quot;old-school&quot; website using HTML and JavaScript, which involves manually downloading and linking files. Here&#39;s a simple index.html file that links to a JavaScript file:</p>\n\n<pre><code>&lt;!-- index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript Example&lt;/title&gt;\n  &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Hello from HTML!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The line <code>&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;</code> refers to a separate JavaScript file in the same directory named index.js:</p>\n\n<pre><code>// index.js\nconsole.log(&quot;Hello from JavaScript!&quot;);\n</code></pre>\n\n<p>This is all you need to make a website! Now let&#39;s say you wanted to add a library someone else wrote like moment.js (a library which can help format dates in a human readable way). For example, you can use the moment function in JavaScript as follows:</p>\n\n<pre><code>moment().startOf(&#39;day&#39;).fromNow();        // 20 hours ago\n</code></pre>\n\n<p>But this is only assuming you include moment.js on your website! On the homepage for moment.js you see the following instructions:</p>\n\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*ef7OX37jr--Jc38ZxO97Iw.png\" alt=\"Moment.js installation instructions\"></p>\n\n<p>Hmm, there&#39;s a lot of stuff going in the Install section on the right. But let&#39;s ignore that for now - we can add moment.js to our website by downloading the moment.min.js file in the same directory and including it in our index.html file.</p>\n\n<pre><code>&lt;!-- index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;title&gt;Example&lt;/title&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt;\n  &lt;script src=&quot;moment.min.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Hello from HTML!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Note that moment.min.js gets loaded before index.js, which means you can use the moment function in index.js as follows:</p>\n\n<pre><code>// index.js\nconsole.log(&quot;Hello from JavaScript!&quot;);\nconsole.log(moment().startOf(&#39;day&#39;).fromNow());\n</code></pre>\n\n<p>And this is how we used to make websites with JavaScript libraries! The good thing was that it was easy enough to understand. The bad thing was that it was annoying to find and download new versions of libraries every time they would update.</p>\n\n<h3>Using a JavaScript package manager (npm)</h3>\n\n<p>Starting around 2010, several competing JavaScript package managers emerged to help automate the process of downloading and upgrading libraries from a central repository. Bower was arguably the most popular in 2013, but eventually was overtaken by npm around 2015. (It&#39;s worth noting that starting around late 2016, yarn has picked up a lot of traction as an alternative to npm&#39;s interface, but it still uses npm packages under the hood.)\nNote that npm was originally a package manager made specifically for node.js, a JavaScript runtime designed to run on the server, not the frontend. So that makes it a pretty weird choice for a frontend JavaScript package manager for libraries meant to run in a browser.</p>\n\n<blockquote>\n<p>Note: Using package managers generally involves using a command line, which in the past was never required as a frontend dev. If you&#39;ve never used one, you can read this tutorial to get a good overview to get started. For better or for worse, knowing how to use the command line is an important part of modern JavaScript (and it opens up doors in other areas of development as well).</p>\n</blockquote>\n\n<p>Let&#39;s look at how to use npm to install the moment.js package automatically instead of manually downloading it. If you have node.js installed, you already have npm installed, which means you can navigate your command line to the folder with your index.html file and enter:</p>\n\n<pre><code>$ npm init\n</code></pre>\n\n<p>This will prompt you with several questions (the defaults are fine, you can hit &quot;Enter&quot; for each question) and generate a new file named package.json. This is a configuration file that npm uses to save all project information. With the defaults the contents of package.json should look something like:</p>\n\n<pre><code>{\n  &quot;name&quot;: &quot;your-project-name&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;\n}\n</code></pre>\n\n<p>To install the moment.js JavaScript package, we can now follow the npm instructions from their home page by entering the following command in the command line:</p>\n\n<pre><code>$ npm install moment --save\n</code></pre>\n\n<p>This command does two things - first, it downloads all the code from the moment.js package into a folder called node_modules. Second, it automatically modifies the package.json file to keep track of moment.js as a project dependency.</p>\n\n<pre><code>{\n  &quot;name&quot;: &quot;modern-javascript-example&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: {\n    &quot;moment&quot;: &quot;^2.22.2&quot;\n  }\n}\n</code></pre>\n\n<p>This is useful later when sharing a project with others - instead of sharing the node_modules folder (which can get very large), you only need to share the package.json file and other developers can install the required packages automatically with the command npm install.</p>\n\n<p>So now we no longer have to manually download moment.js from the website, we can automatically download and update it using npm. Looking inside the node<em>modules folder, we can see the moment.min.js file in the node</em>modules/moment/min directory. This means we can link to the npm downloaded version of moment.min.js in the index.html file as follows:</p>\n\n<pre><code>&lt;!-- index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript Example&lt;/title&gt;\n  &lt;script src=&quot;node_modules/moment/min/moment.min.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Hello from HTML!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>So the good thing is that we can now use npm to download and update our packages through the command line. The bad thing is right now we&#39;re digging through the node_modules folder to find the location of each package and manually including it in our HTML. That&#39;s pretty inconvenient, so next we&#39;ll take a look at how to automate that process as well.</p>\n\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*GeEETvRqyG4o7SZdbU2Guw.png\" alt=\"Dinosaur comic panel 2\"></p>\n\n<h3>Using a JavaScript module bundler (webpack)</h3>\n\n<p>Most programming languages provide a way to import code from one file into another. JavaScript wasn&#39;t originally designed with this feature, because JavaScript was designed to only run in the browser, with no access to the file system of the client&#39;s computer (for security reasons). So for the longest time, organizing JavaScript code in multiple files required you to load each file with variables shared globally.</p>\n\n<p>This is actually what we&#39;re doing with the above moment.js example - the entire moment.min.js file is loaded in the HTML, which defines a global variable moment, which is then available to any file loaded after moment.min.js (regardless of whether or not it needs access to it).</p>\n\n<p>In 2009, a project named CommonJS was started with the goal of specifying an ecosystem for JavaScript outside the browser. A big part of CommonJS was its specification for modules, which would finally allow JavaScript to import and export code across files like most programming languages, without resorting to global variables. The most well-known of implementation of CommonJS modules is node.js.</p>\n\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*xeF1flp1zDLLJ4j7rDQ6-Q.png\" alt=\"Node.js logo\"></p>\n\n<p>As mentioned earlier, node.js is a JavaScript runtime designed to run on the server. Here&#39;s what the earlier example would look like using node.js modules. Instead of loading all of moment.min.js with an HTML script tag, you can load it directly in the JavaScript file as follows:</p>\n\n<pre><code>// index.js\nvar moment = require(&#39;moment&#39;);\nconsole.log(&quot;Hello from JavaScript!&quot;);\nconsole.log(moment().startOf(&#39;day&#39;).fromNow());\n</code></pre>\n\n<p>Again, this is how module loading works in node.js, which works great since node.js is a server side language with access to the computer&#39;s file system. Node.js also knows the location of each npm module path, so instead of having to write <code>require(&#39;./node_modules/moment/min/moment.min.js)</code>, you can simply write <code>require(&#39;moment&#39;)</code> -  pretty sweet.</p>\n\n<p>This is all great for node.js, but if you tried to use the above code in the browser, you&#39;d get an error saying require is not defined. The browser doesn&#39;t have access to the file system, which means loading modules in this way is very tricky - loading files has to be done dynamically, either synchronously (which slows down execution) or asynchronously (which can have timing issues).</p>\n\n<p>This is where a module bundler comes in. A JavaScript module bundler is a tool that gets around the problem with a build step (which has access to the file system) to create a final output that is browser compatible (which doesn&#39;t need access to the file system). In this case, we need a module bundler to find all require statements (which is invalid browser JavaScript syntax) and replace them with the actual contents of each required file. The final result is a single bundled JavaScript file (with no require statements)!</p>\n\n<p>The most popular module bundler was Browserify, which was released in 2011 and pioneered the usage of node.js style require statements on the frontend (which is essentially what enabled npm to become the frontend package manager of choice). Around 2015, webpack eventually became the more widely used module bundler (fueled by the popularity of the React frontend framework, which took full advantage of webpack&#39;s various features).</p>\n\n<p>Let&#39;s take a look at how to use webpack to get the above require(&#39;moment&#39;) example working in the browser. First we need to install webpack into the project. Webpack itself is an npm package, so we can install it from the command line:</p>\n\n<pre><code>$ npm install webpack webpack-cli --save-dev\n</code></pre>\n\n<p>Note that we&#39;re installing two packages - webpack and webpack-cli (which enables you to use webpack from the command line). Also note the --save-dev argument - this saves it as a development dependency, which means it&#39;s a package that you need in your development environment but not on your production server. You can see this reflected in the package.json file, which was automatically updated:</p>\n\n<pre><code>{\n  &quot;name&quot;: &quot;modern-javascript-example&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: {\n    &quot;moment&quot;: &quot;^2.19.1&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;webpack&quot;: &quot;^4.17.1&quot;,\n    &quot;webpack-cli&quot;: &quot;^3.1.0&quot;\n  }\n}\n</code></pre>\n\n<p>Now we have webpack and webpack-cli installed as packages in the node_modules folder. You can use webpack-cli from the command line as follows:</p>\n\n<pre><code>$ ./node_modules/.bin/webpack index.js --mode=development\n</code></pre>\n\n<p>This command will run the webpack tool that was installed in the node_modules folder, start with the index.js file, find any require statements, and replace them with the appropriate code to create a single output file (which by default is dist/main.js). The <code>--mode=development</code> argument is to keep the JavaScript readable for developers, as opposed to a minified output with the argument <code>--mode=production</code>.</p>\n\n<p>Now that we have webpack&#39;s dist/main.js output, we are going to use it instead of index.js in the browser, as it contains invalid require statements. This would be reflected in the index.html file as follows:</p>\n\n<pre><code>&lt;!-- index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;title&gt;JavaScript Example&lt;/title&gt;\n  &lt;script src=&quot;dist/main.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Hello from HTML!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>If you refresh the browser, you should see that everything is working as before!</p>\n\n<p>Note that we&#39;ll need to run the webpack command each time we change index.js. This is tedious, and will get even more tedious as we use webpack&#39;s more advanced features (like generating source maps to help debug the original code from the transpiled code). Webpack can read options from a config file in the root directory of the project named webpack.config.js, which in our case would look like:</p>\n\n<pre><code>// webpack.config.js\nmodule.exports = {\n  mode: &#39;development&#39;,\n  entry: &#39;./index.js&#39;,\n  output: {\n    filename: &#39;main.js&#39;,\n    publicPath: &#39;dist&#39;\n  }\n};\n</code></pre>\n\n<p>Now each time we change index.js, we can run webpack with the command:</p>\n\n<pre><code>$ ./node_modules/.bin/webpack\n</code></pre>\n\n<p>We don&#39;t need to specify the <code>index.js</code> and <code>--mode=development</code> options anymore, since webpack is loading those options from the <code>webpack.config.js</code> file. This is better, but it&#39;s still tedious to enter this command for each code change - we&#39;ll make this process smoother in a bit.</p>\n\n<p>Overall, this may not seem like much, but there are some huge advantages to this workflow. We are no longer loading external scripts via global variables. Any new JavaScript libraries will be added using require statements in the JavaScript, as opposed to adding new <code>&lt;script&gt;</code> tags in the HTML. Having a single JavaScript bundle file is often better for performance. And now that we added a build step, there are some other powerful features we can add to our development workflow!</p>\n\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*ee_ivxNTKgIJTjmEMC4-dg.png\" alt=\"Dinosaur comic panels 3 and 4\"></p>\n\n<h3>Transpiling code for new language features (babel)</h3>\n\n<p>Transpiling code means converting the code in one language to code in another similar language. This is an important part of frontend development - since browsers are slow to add new features, new languages were created with experimental features that transpile to browser compatible languages.\nFor CSS, there&#39;s Sass, Less, and Stylus, to name a few. For JavaScript, the most popular transpiler for a while was CoffeeScript (released around 2010), whereas nowadays most people use babel or TypeScript. CoffeeScript is a language focused on improving JavaScript by significantly changing the language - optional parentheses, significant whitespace, etc. Babel is not a new language but a transpiler that transpiles next generation JavaScript with features not yet available to all browsers (ES2015 and beyond) to older more compatible JavaScript (ES5). Typescript is a language that is essentially identical to next generation JavaScript, but also adds optional static typing. Many people choose to use babel because it&#39;s closest to vanilla JavaScript.</p>\n\n<p>Let&#39;s look at an example of how to use babel with our existing webpack build step. First we&#39;ll install babel (which is an npm package) into the project from the command line:</p>\n\n<pre><code>$ npm install @babel/core @babel/preset-env babel-loader --save-dev\n</code></pre>\n\n<p>Note that we&#39;re installing 3 separate packages as dev dependencies - @babel/core is the main part of babel, @babel/preset-env is a preset defining which new JavaScript features to transpile, and babel-loader is a package to enable babel to work with webpack. We can configure webpack to use babel-loader by editing the webpack.config.js file as follows:</p>\n\n<pre><code>// webpack.config.js\nmodule.exports = {\n  mode: &#39;development&#39;,\n  entry: &#39;./index.js&#39;,\n  output: {\n    filename: &#39;main.js&#39;,\n    publicPath: &#39;dist&#39;\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: {\n          loader: &#39;babel-loader&#39;,\n          options: {\n            presets: [&#39;@babel/preset-env&#39;]\n          }\n        }\n      }\n    ]\n  }\n};\n</code></pre>\n\n<p>This syntax can be confusing (fortunately it&#39;s not something we&#39;ll be editing often). Basically we&#39;re telling webpack to look for any .js files (excluding ones in the node_modules folder) and apply babel transpilation using babel-loader with the @babel/preset-env preset. You can read more about webpack configuration syntax here.</p>\n\n<p>Now that everything&#39;s set up, we can start writing ES2015 features in our JavaScript! Here&#39;s an example of an ES2015 template string in the index.js file:</p>\n\n<pre><code>// index.js\nvar moment = require(&#39;moment&#39;);\nconsole.log(&quot;Hello from JavaScript!&quot;);\nconsole.log(moment().startOf(&#39;day&#39;).fromNow());\nvar name = &quot;Bob&quot;, time = &quot;today&quot;;\nconsole.log(`Hello ${name}, how are you ${time}?`);\n</code></pre>\n\n<p>We can also use the ES2015 import statement instead of require for loading modules, which is what you&#39;ll see in a lot of codebases today:</p>\n\n<pre><code>// index.js\nimport moment from &#39;moment&#39;;\nconsole.log(&quot;Hello from JavaScript!&quot;);\nconsole.log(moment().startOf(&#39;day&#39;).fromNow());\nvar name = &quot;Bob&quot;, time = &quot;today&quot;;\nconsole.log(`Hello ${name}, how are you ${time}?`);\n</code></pre>\n\n<p>In this example, the import syntax isn&#39;t much different from the require syntax, but import has extra flexibility for more advanced cases. Since we changed index.js, we need to run webpack again in the command line:</p>\n\n<pre><code>$ ./node_modules/.bin/webpack\n</code></pre>\n\n<p>Now you can refresh index.html in the browser. At the time of this writing, most modern browsers support all ES2015 features, so it can be hard to tell if babel did its job. You can test it in an older browser like IE9, or you can search in main.js to find the line of transpiled code:</p>\n\n<pre><code>// main.js\n// ...\nconsole.log(&#39;Hello &#39; + name + &#39;, how are you &#39; + time + &#39;?&#39;);\n// ...\n</code></pre>\n\n<p>Here you can see babel transpiled the ES2015 template string into regular JavaScript string concatenation to maintain browser compatibility. While this particular example may not be too exciting, the ability to transpile code is a very powerful one. There are some exciting language features coming to JavaScript like async/await that you can start using today to write better code. And while transpilation may at times seem tedious and painful, it has led to a dramatic improvement of the language in the past few years, as people are testing out tomorrow&#39;s features today.</p>\n\n<p>We&#39;re almost done, but there&#39;s still some unpolished edges in our workflow. If we&#39;re concerned about performance, we should be minifying the bundle file, which should be easy enough since we&#39;re already incorporating a build step. We also need to re-run the webpack command each time we change the JavaScript, which gets old real fast. So the next thing we&#39;ll look at are some convenience tools to solve these issues.</p>\n\n<h3>Using a task runner (npm scripts)</h3>\n\n<p>Now that we&#39;re invested in using a build step to work with JavaScript modules, it makes sense to use a task runner, which is a tool that automates different parts of the build process. For frontend development, tasks include minifying code, optimizing images, running tests, etc.\nIn 2013, Grunt was the most popular frontend task runner, with Gulp following shortly after. Both rely on plugins that wrap other command line tools. Nowadays the most popular choice seems to be using the scripting capabilities built into the npm package manager itself, which doesn&#39;t use plugins but instead works with other command line tools directly.</p>\n\n<p>Let&#39;s write some npm scripts to make using webpack easier. This involves simply changing the package.json file as follows:</p>\n\n<pre><code>{\n  &quot;name&quot;: &quot;modern-javascript-example&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n    &quot;build&quot;: &quot;webpack --progress --mode=production&quot;,\n    &quot;watch&quot;: &quot;webpack --progress --watch&quot;\n  },\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: {\n    &quot;moment&quot;: &quot;^2.22.2&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;@babel/core&quot;: &quot;^7.0.0&quot;,\n    &quot;@babel/preset-env&quot;: &quot;^7.0.0&quot;,\n    &quot;babel-loader&quot;: &quot;^8.0.2&quot;,\n    &quot;webpack&quot;: &quot;^4.17.1&quot;,\n    &quot;webpack-cli&quot;: &quot;^3.1.0&quot;\n  }\n}\n</code></pre>\n\n<p>Here we&#39;ve added two new scripts, build and watch. To run the build script, you can enter in the command line:</p>\n\n<pre><code>$ npm run build\n</code></pre>\n\n<p>This will run webpack (using configuration from the webpack.config.js we made earlier) with the --progress option to show the percent progress and the --mode=production option to minimize the code for production. To run the watch script:</p>\n\n<pre><code>$ npm run watch\n</code></pre>\n\n<p>This uses the --watch option instead to automatically re-run webpack each time any JavaScript file changes, which is great for development.\nNote that the scripts in package.json can run webpack without having to specify the full path ./node_modules/.bin/webpack, since node.js knows the location of each npm module path. This is pretty sweet! We can make things even sweeter by installing webpack-dev-server, a separate tool which provides a simple web server with live reloading. To install it as a development dependency, enter the command:</p>\n\n<pre><code>$ npm install webpack-dev-server --save-dev \n</code></pre>\n\n<p>Then add an npm script to package.json:</p>\n\n<pre><code>{\n  &quot;name&quot;: &quot;modern-javascript-example&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n    &quot;build&quot;: &quot;webpack --progress -p&quot;,\n    &quot;watch&quot;: &quot;webpack --progress --watch&quot;,\n    &quot;server&quot;: &quot;webpack-dev-server --open&quot;\n  },\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;dependencies&quot;: {\n    &quot;moment&quot;: &quot;^2.19.1&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;@babel/core&quot;: &quot;^7.0.0&quot;,\n    &quot;@babel/preset-env&quot;: &quot;^7.0.0&quot;,\n    &quot;babel-loader&quot;: &quot;^8.0.2&quot;,\n    &quot;webpack&quot;: &quot;^3.7.1&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^3.1.6&quot;\n  }\n}\n</code></pre>\n\n<p>Now you can start your dev server by running the command:</p>\n\n<pre><code>$ npm run server\n</code></pre>\n\n<p>This will automatically open the index.html website in your browser with an address of localhost:8080 (by default). Any time you change your JavaScript in index.js, webpack-dev-server will rebuild its own bundled JavaScript and refresh the browser automatically. This is a surprisingly useful time saver, as it allows you to keep your focus on the code instead of having to continually switch contexts between the code and the browser to see new changes.\nThis is only scratching the surface, there are plenty more options with both webpack and webpack-dev-server (which you can read about here). You can of course make npm scripts for running other tasks as well, such as converting Sass to CSS, compressing images, running tests - anything that has a command line tool is fair game. There are also some great advanced options and tricks with npm scripts themselves - this talk by Kate Hudson is a great place to start:</p>\n\n<div style=\"--aspect-ratio: 16/9;\">\n    <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0RYETb9YVrk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n\n<h3>Conclusion</h3>\n\n<p>So this is modern JavaScript in a nutshell. We went from plain HTML and JS to using a package manager to automatically download 3rd party packages, a module bundler to create a single script file, a transpiler to use future JavaScript features, and a task runner to automate different parts of the build process. Definitely a lot of moving pieces here, especially for beginners. Web development used to be a great entry point for people new to programming precisely because it was so easy to get up and running; nowadays it can be quite daunting, especially because the various tools tend to change rapidly.\nStill, it&#39;s not as bad as it seems. Things are settling down, particularly with the adoption of the node ecosystem as a viable way to work with the frontend. It&#39;s nice and consistent to use npm as a package manager, node require or import statements for modules, and npm scripts for running tasks. This is a vastly simplified workflow compared to even a year or two ago!</p>\n\n<p>Even better for beginners and experienced developers alike is that frameworks these days often come with tools to make the process easier to get started. Ember has ember-cli, which was hugely influential on Angular&#39;s angular-cli, React&#39;s create-react-app, Vue&#39;s vue-cli, etc. All these tools will set up a project with everything you need - all you need to do is start writing code. However, these tools aren&#39;t magic, they simply set everything up in a consistent and working fashion - you may often get to a point where you need to do some extra configuration with webpack, babel, etc. So it&#39;s still very critical to understand what each piece does as we&#39;ve covered in this article.</p>\n\n<p>Modern JavaScript can definitely be frustrating to work with as it continues to change and evolve at a rapid pace. But even though it may seem at times like re-inventing the wheel, JavaScript&#39;s rapid evolution has helped push innovations such as hot reloading, real-time linting, and time-travel debugging. It&#39;s an exciting time to be a developer, and I hope this information can serve as a roadmap to help you on your journey!</p>\n\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*H6NN_RxZNeVyLYpCirsslg.png\" alt=\"Dinosaur comic panel 5\"></p>\n\n<p><em>Special thanks to @ryanqnorth&#39;s Dinosaur Comics, which has served up some of the finest absurdist humor since 2003 (when dinosaurs ruled the web).</em></p>\n"})
UserRecord.create!({record_id: 26, name: "The Non-Designer's Design Book", description: "", user_collection_id: 3, x: 1787.46017478378, y: 1246.56687519173, width: 180, height: 272, angle: 0.0, scale: 1.58454054887982, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560353402/records/maizv6dlkc2h7ciptzhf.jpg", color: "#d1a025", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 27, name: "Chef", description: "When Chef Carl Casper suddenly quits his job at a prominent Los Angeles restaurant after refusing to compromise his creative integrity for its controlling owner, he is left to figure out what's next. Finding himself in Miami, he teams up with his ex-wife, his friend and his son to launch a food truck. Taking to the road, Chef Carl goes back to his roots to reignite his passion for the kitchen -- and zest for life and love.", user_collection_id: 2, x: 2931.06293322419, y: -851.38628726572, width: 300, height: 450, angle: 0.0, scale: 1.66226487293145, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560388097/records/nn9duidt90f0m0ccovzf.jpg", color: "#cfa129", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 28, name: "Test", description: "fdsfadsfsa", user_collection_id: 28, x: 961.434128202089, y: 1395.96472509441, width: 399, height: 379, angle: 0.0, scale: 0.261454440634166, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561152198/records/k7vfxqvfi5wq1jegkfcc.png", color: "#4e9dea", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 29, name: "A blog post", description: "# Some thoughts\r\nThis was written using markdown.\r\n\r\nHere is a list\r\n\r\n1. One thing\r\n2. Another thing\r\n\r\nHere is some code?\r\n\r\n```\r\ndef hello\r\n  puts \"hi\"\r\nend\r\n```\r\n## A sub header\r\nThis is some more stuff", user_collection_id: 28, x: 1058.75773165259, y: 1382.44755794851, width: 960, height: 500, angle: 0.0, scale: 0.0634158763135103, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561152729/records/woy78ppq9ydt6mb4hn4a.jpg", color: "#54524b", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 37, name: "18th street Pink Line", description: "### The Pink Line stop\r\n\r\nThis is where I take the bus.\r\n\r\nHere is a list:\r\n\r\n* One\r\n* Two\r\n* Three\r\n\r\nAnother list\r\n\r\n1. Test\r\n2. hello\r\n3. Yo", user_collection_id: 28, x: 1237.5916558439, y: 1414.94788940301, width: 3456, height: 2304, angle: 0.0, scale: 0.0351844539156109, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561484355/records/nbxxpgpnp7rcz3bjchox.jpg", color: "#706056", zindex: nil, rendered_description: "<h3>The Pink Line stop</h3>\n\n<p>This is where I take the bus.</p>\n\n<p>Here is a list:</p>\n\n<ul>\n<li>One</li>\n<li>Two</li>\n<li>Three</li>\n</ul>\n\n<p>Another list</p>\n\n<ol>\n<li>Test</li>\n<li>hello</li>\n<li>Yo</li>\n</ol>\n"})
UserRecord.create!({record_id: 39, name: "Prework", description: "This is a _test_ **test** test", user_collection_id: 28, x: 773.236503553164, y: 1392.84447872756, width: 1982, height: 1188, angle: 0.0, scale: 0.0865860661218494, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561495116/records/gzimmlfiem7vkyryinoi.png", color: "#dedad4", zindex: nil, rendered_description: "<p>This is a <em>test</em> <strong>test</strong> test</p>\n"})
UserRecord.create!({record_id: 38, name: "New York", description: "### Weird place\r\n\r\nNice room, weird setup.\r\n\r\nNow some code:\r\n\r\n```ruby\r\ndef hello\r\n  puts \"hi\"\r\nend\r\n```\r\n\r\nAnother list:\r\n\r\n1. One\r\n2. Two\r\n3. three", user_collection_id: 28, x: 959.921129318313, y: 1253.59493649321, width: 1214, height: 822, angle: 0.0, scale: 0.113738685190202, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561493058/records/tavr2mi0aq6zmnubjyl8.png", color: "#000", zindex: 1, rendered_description: "<h3>Weird place</h3>\n\n<p>Nice room, weird setup.</p>\n\n<p>Now some code:</p>\n\n<p><code>ruby\ndef hello\n  puts &quot;hi&quot;\nend\n</code></p>\n\n<p>Another list:</p>\n\n<ol>\n<li>One</li>\n<li>Two</li>\n<li>three</li>\n</ol>\n"})
UserRecord.create!({record_id: 31, name: "Testsets", description: "testsafdsfsd", user_collection_id: 28, x: 1097.76577900868, y: 1284.02050074557, width: 200, height: 200, angle: 0.0, scale: 0.454435528152819, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561315942/records/efgwpvcpqwjro9dfa3st.jpg", color: "#595959", zindex: nil, rendered_description: nil})
UserRecord.create!({record_id: 25, name: "Franny and Zooey", description: "Two short stories that work together as one. The ending of the second story has a great emotional impact that can't be summarized in a short review.", user_collection_id: 3, x: 1328.31964587551, y: 1338.86744795203, width: 180, height: 307, angle: 0.0, scale: 1.56269960503754, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1560353209/records/ffxshgdjjx5gvqjkau6n.jpg", color: "#e2dbc9", zindex: nil, rendered_description: nil})
# UserRecord.create!({record_id: 51, name: "sample", description: "fds", user_collection_id: 27, x: 5066.3274665043, y: 1381.49724939624, width: 2048, height: 1365, angle: 0.0, scale: 0.774754972453598, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567179179/records/cripkkioje0epjcycf40.jpg", color: "#574d4c", zindex: nil, rendered_description: "<p>fds</p>\n"})
UserRecord.create!({record_id: 42, name: "Capstones", description: "## This is a test\r\n\r\n1. One\r\n2. Two\r\n3. Three\r\n\r\nhello there!!", user_collection_id: 28, x: 773.223488626227, y: 1240.60355711, width: 2048, height: 1365, angle: 0.0, scale: 0.0632093353702488, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1565101653/records/zqsr4ygeaq7z7e1mityu.jpg", color: "#574d4c", zindex: nil, rendered_description: "<h2>This is a test</h2>\n\n<ol>\n<li>One</li>\n<li>Two</li>\n<li>Three</li>\n</ol>\n\n<p>hello there!!</p>\n"})
UserRecord.create!({record_id: 44, name: "Modern CSS Explained For Dinosaurs", description: "CSS is strangely considered both one of the easiest and one of the hardest languages to learn as a web developer. It’s certainly easy enough to get started with it — you define style properties and values to apply to specific elements, and…that’s pretty much all you need to get going! However, it gets tangled and complicated to organize CSS in a meaningful way for larger projects. Changing any line of CSS to style an element on one page often leads to unintended changes for elements on other pages.\r\n\r\nIn order to deal with the inherent complexity of CSS, all sorts of different best practices have been established. The problem is that there isn’t any strong consensus on which best practices are in fact the best, and many of them seem to completely contradict each other. If you’re trying to learn CSS for the first time, this can be disorienting to say the least.\r\n\r\nThe goal of this article is to provide a historical context of how CSS approaches and tooling have evolved to what they are today in 2018. By understanding this history, it will be easier to understand each approach and how to use them to your benefit. Let’s get started!\r\n\r\n### Using CSS for basic styling\r\nLet’s start with a basic website using just a simple index.html file that links to a separate index.css file:\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Modern CSS</title>\r\n  <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n  <header>This is the header.</header>\r\n  <main>\r\n    <h1>This is the main content.</h1>\r\n    <p>...</p>\r\n  </main>\r\n  <nav>\r\n    <h4>This is the navigation section.</h4>\r\n    <p>...</p>\r\n  </nav>\r\n  <aside>\r\n    <h4>This is an aside section.</h4>\r\n    <p>...</p>\r\n  </aside>\r\n  <footer>This is the footer.</footer>\r\n</body>\r\n</html>\r\n```\r\n\r\nRight now we aren’t using any classes or ids in the HTML, just semantic tags. Without any CSS, the website looks like this (using placeholder text):\r\n\r\n![modern-css-dinosaur-02.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312299/images/ha15lzuobge9m4ikyzmt.png)\r\n*Click here to see a live example*\r\n\r\nFunctional, but not very pretty. We can add CSS to improve the basic typography in index.css:\r\n\r\n```\r\n/* BASIC TYPOGRAPHY */\r\n/* from https://github.com/oxalorg/sakura */html {\r\n  font-size: 62.5%;\r\n  font-family: serif;\r\n}body {\r\n  font-size: 1.8rem;\r\n  line-height: 1.618;\r\n  max-width: 38em;\r\n  margin: auto;\r\n  color: #4a4a4a;\r\n  background-color: #f9f9f9;\r\n  padding: 13px;\r\n}@media (max-width: 684px) {\r\n  body {\r\n    font-size: 1.53rem;\r\n  }\r\n}@media (max-width: 382px) {\r\n  body {\r\n    font-size: 1.35rem;\r\n  }\r\n}h1, h2, h3, h4, h5, h6 {\r\n  line-height: 1.1;\r\n  font-family: Verdana, Geneva, sans-serif;\r\n  font-weight: 700;\r\n  overflow-wrap: break-word;\r\n  word-wrap: break-word;\r\n  -ms-word-break: break-all;\r\n  word-break: break-word;\r\n  -ms-hyphens: auto;\r\n  -moz-hyphens: auto;\r\n  -webkit-hyphens: auto;\r\n  hyphens: auto;\r\n}h1 {\r\n  font-size: 2.35em;\r\n}h2 {\r\n  font-size: 2em;\r\n}h3 {\r\n  font-size: 1.75em;\r\n}h4 {\r\n  font-size: 1.5em;\r\n}h5 {\r\n  font-size: 1.25em;\r\n}h6 {\r\n  font-size: 1em;\r\n}\r\n```\r\n\r\nHere most of the CSS is styling the typography (fonts with sizes, line height, etc.), with some styling for the colors and a centered layout. You’d have to study design to know good values to choose for each of these properties (these styles are from sakura.css), but the CSS itself that’s being applied here isn’t too complicated to read. The result looks like this:\r\n\r\n![modern-css-dinosaur-03.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312355/images/bm2dy8aent7wakz4rfnl.png)\r\n*Click here to see a live example*\r\n\r\nWhat a difference! This is the promise of CSS — a simple way to add styles to a document, without requiring programming or complex logic. Unfortunately, things start to get hairier when we use CSS for more than just typography and colors (which we’ll tackle next).\r\n\r\n### Using CSS for layout\r\n\r\nIn the 1990s, before CSS gained wide adoption, there weren’t a lot of options to layout content on the page. HTML was originally designed as a language to create plain documents, not dynamic websites with sidebars, columns, etc. In those early days, layout was often done using HTML tables — the entire webpage would be within a table, which could be used to organize the content in rows and columns. This approach worked, but the downside was the tight coupling of content and presentation — if you wanted to change the layout of a site, it would require rewriting significant amounts of HTML.\r\n\r\nOnce CSS entered the scene, there was a strong push to keep content (written in the HTML) separate from presentation (written in the CSS). So people found ways to move all layout code out of HTML (no more tables) into CSS. It’s important to note that like HTML, CSS wasn’t really designed to layout content on a page either, so early attempts at this separation of concerns were difficult to achieve gracefully.\r\n\r\nLet’s take a look at how this works in practice with our above example. Before we define any CSS layout, we’ll first reset any margins and paddings (which affect layout calculations) as well as give section distinct colors (not to make it pretty, but to make each section visually stand out when testing different layouts).\r\n\r\n```\r\n/* RESET LAYOUT AND ADD COLORS */body {\r\n  margin: 0;\r\n  padding: 0;\r\n  max-width: inherit;\r\n  background: #fff;\r\n  color: #4a4a4a;\r\n}header, footer {\r\n  font-size: large;\r\n  text-align: center;\r\n  padding: 0.3em 0;\r\n  background-color: #4a4a4a;\r\n  color: #f9f9f9;\r\n}nav {\r\n  background: #eee;\r\n}main {\r\n  background: #f9f9f9;\r\n}aside {\r\n  background: #eee;\r\n}\r\n```\r\n\r\nNow the website temporarily looks like:\r\n\r\n![modern-css-dinosaur-04.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312419/images/x0xnclhrk2uue3az1sti.png)\r\n*Click here to see a live example*\r\n\r\nNow we’re ready to use CSS to layout the content on the page. We’ll look at three different approaches in chronological order, starting with the classic float-based layouts.\r\n\r\n#### Float-based layout\r\n\r\nThe CSS float property was originally introduced to float an image inside a column of text on the left or right (something you often see in newspapers). Web developers in the early 2000s took advantage of the fact that you could float not just images, but any element, meaning you could create the illusion of rows and columns by floating entire divs of content. But again, floats weren’t designed for this purpose, so creating this illusion was difficult to pull off in a consistent fashion.\r\n\r\nIn 2006, A List Apart published the popular article In Search of the Holy Grail, which outlined a detailed and thorough approach to creating what was known as the Holy Grail layout — a header, three columns and a footer. It’s pretty crazy to think that what sounds like a fairly straightforward layout would be referred to as the Holy Grail, but that was indeed how hard it was to create consistent layout at the time using pure CSS.\r\n\r\nBelow is a float-based layout for our example based on the technique described in that article:\r\n\r\n```\r\n/* FLOAT-BASED LAYOUT */body {\r\n  padding-left: 200px;\r\n  padding-right: 190px;\r\n  min-width: 240px;\r\n}header, footer {\r\n  margin-left: -200px;\r\n  margin-right: -190px;   \r\n}main, nav, aside {\r\n  position: relative;\r\n  float: left;\r\n}main {\r\n  padding: 0 20px;\r\n  width: 100%;\r\n}nav {\r\n  width: 180px;\r\n  padding: 0 10px;\r\n  right: 240px;\r\n  margin-left: -100%;\r\n}aside {\r\n  width: 130px;\r\n  padding: 0 10px;\r\n  margin-right: -100%;\r\n}footer {\r\n  clear: both;\r\n}* html nav {\r\n  left: 150px;\r\n}\r\n```\r\n\r\nLooking at the CSS, you can see there are quite a few hacks necessary to get it to work (negative margins, the clear: both property, hard-coded width calculations, etc.) — the article does a good job explaining the reasoning for each in detail. Below is what the result looks like:\r\n\r\n![modern-css-dinosaur-05.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312470/images/wbwc8qffmqiavmaipl5i.png)\r\n*Click here to see a live example*\r\n\r\nThis is nice, but you can see from the colors that the three columns are not equal in height, and the page doesn’t fill the height of the screen. These issues are inherent with a float-based approach. All a float can do is place content to the left or right of a section — the CSS has no way to infer the heights of the content in the other sections. This problem had no straightforward solution until many years later, with a flexbox-based layout.\r\n\r\n#### Flexbox-based layout\r\n\r\nThe flexbox CSS property was first proposed in 2009, but didn’t get widespread browser adoption until around 2015. Flexbox was designed to define how space is distributed across a single column or row, which makes it a better candidate for defining layout compared to using floats. This meant that after about a decade of using float-based layouts, web developers were finally able to use CSS for layout without the need for the hacks needed with floats.\r\n\r\nBelow is a flexbox-based layout for our example based on the technique described on the site Solved by Flexbox (a popular resource showcasing different flexbox examples). Note that in order to make flexbox work, we need to an an extra wrapper div around the three columns in the HTML:\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Modern CSS</title>\r\n  <link rel=\"stylesheet\" href=\"index.css\">\r\n</head>\r\n<body>\r\n  <header>This is the header.</header>\r\n  <div class=\"container\">\r\n    <main>\r\n      <h1>This is the main content.</h1>\r\n      <p>...</p>\r\n    </main>\r\n    <nav>\r\n      <h4>This is the navigation section.</h4>\r\n      <p>...</p>\r\n    </nav>\r\n    <aside>\r\n      <h4>This is an aside section.</h4>\r\n      <p>...</p>\r\n    </aside>\r\n  </div>\r\n  <footer>This is the footer.</footer>\r\n</body>\r\n</html>\r\n```\r\n\r\nAnd here’s the flexbox code in the CSS:\r\n\r\n```\r\n/* FLEXBOX-BASED LAYOUT */body {\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n}.container {\r\n  display: flex;\r\n  flex: 1;\r\n}main {\r\n  flex: 1;\r\n  padding: 0 20px;\r\n}nav {\r\n  flex: 0 0 180px;\r\n  padding: 0 10px;\r\n  order: -1;\r\n}aside {\r\n  flex: 0 0 130px;\r\n  padding: 0 10px;\r\n}\r\n```\r\n\r\nThat is way, way more compact compared to the float-based layout approach! The flexbox properties and values are a bit confusing at first glance, but it eliminates the need for a lot of the hacks like negative margins that were necessary with float-based layouts — a huge win. Here is what the result looks like:\r\n\r\n![modern-css-dinosaur-06.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312861/images/liegzpoogzxy6s0kmyms.png)\r\n*Click here for a live example*\r\n\r\nMuch better! The columns are all equal height and take up the full height of the page. In some sense this seems perfect, but there are a couple of minor downsides to this approach. One is browser support — currently every modern browser supports flexbox, but some older browsers never will. Fortunately browser vendors are making a bigger push to end support for these older browsers, making a more consistent development experience for web designers. Another downside is the fact that we needed to add the `<div class=\"container\">` to the markup — it would be nice to avoid it. In an ideal world, any CSS layout wouldn’t require changing the HTML markup at all.\r\n\r\nThe biggest downside though is the code in the CSS itself — flexbox eliminates a lot of the float hacks, but the code isn’t as expressive as it could be for defining layout. It’s hard to read the flexbox CSS and get a visual understanding how all of the elements will be laid out on the page. This leads to a lot of guessing and checking when writing flexbox-based layouts.\r\n\r\nIt’s important to note again that flexbox was designed to space elements within a single column or row — it was not designed for an entire page layout! Even though it does a serviceable job (much better than float-based layouts), a different specification was specifically developed to handle layouts with multiple rows and columns. This specification is known as CSS grid.\r\n\r\n#### Grid-based layout\r\n\r\nCSS grid was first proposed in 2011 (not too long after the flexbox proposal), but took a long time to gain widespread adoption with browsers. As of early 2018, CSS grid is supported by most modern browsers (a huge improvement over even a year or two ago).\r\n\r\nBelow is a grid-based layout for our example based on the first method in this CSS tricks article. Note that for this example, we can get rid of the `<div class=\"container\">` that we had to add for the flexbox-based layout — we can simply use the original HTML without modification. Here’s what the CSS looks like:\r\n\r\n```\r\n/* GRID-BASED LAYOUT */body {\r\n  display: grid;\r\n  min-height: 100vh;\r\n  grid-template-columns: 200px 1fr 150px;\r\n  grid-template-rows: min-content 1fr min-content;\r\n}header {\r\n  grid-row: 1;\r\n  grid-column: 1 / 4;\r\n}nav {\r\n  grid-row: 2;\r\n  grid-column: 1 / 2;\r\n  padding: 0 10px;\r\n}main {\r\n  grid-row: 2;\r\n  grid-column: 2 / 3;\r\n  padding: 0 20px;\r\n}aside {\r\n  grid-row: 2;\r\n  grid-column: 3 / 4;\r\n  padding: 0 10px;\r\n}footer {\r\n  grid-row: 3;\r\n  grid-column: 1 / 4;\r\n}\r\n```\r\n\r\nThe result is visually identical to the flexbox based layout. However, the CSS here is much improved in the sense that it clearly expresses the desired layout. The size and shape of the columns and rows are defined in the body selector, and each item in the grid is defined directly by its position.\r\n\r\nOne thing that can be confusing is the grid-column property, which defines the start point / end point of the column. It can be confusing because in this example, there are 3 columns, but the numbers range from 1 to 4. It becomes more clear when you look at the picture below:\r\n\r\n![modern-css-dinosaur-07.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312841/images/d2u7qnlohvos0x6zgxql.png)\r\n*Click here to see a live example*\r\n\r\nThe first column starts at 1 and ends at 2, the second column starts at 2 and ends at 3, and the third column starts at 3 and ends at 4. The header has a grid-column of 1 / 4 to span the entire page, the nav has a grid-column of 1 / 2 to span the first column, etc.\r\n\r\nOnce you get used to the grid syntax, it clearly becomes the ideal way to express layout in CSS. The only real downside to a grid-based layout is browser support, which again has improved tremendously over the past year. It’s hard to overstate the importance of CSS grid as the first real tool in CSS that was actually designed for layout. In some sense, web designers have always had to be very conservative with making creative layouts, since the tools up until now have been fragile, using various hacks and workarounds. Now that CSS grid exists, there is the potential for a new wave of creative layout designs that never would have been possible before — exciting times!\r\n\r\n![modern-css-dinosaur-08.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312811/images/ib8se73xxnbvzatrjwcn.png)\r\n\r\n### Using a CSS preprocessor for new syntax\r\n\r\nSo far we’ve covered using CSS for basic styling as well as layout. Now we’ll get into tooling that was created to help improve the experience of working with CSS as a language itself, starting with CSS preprocessors.\r\n\r\nA CSS preprocessor allows you to write styles using a different language which gets converted into CSS that the browser can understand. This was critical back in the day when browsers were very slow to implement new features. The first major CSS preprocessor was Sass, released in 2006. It featured a new concise syntax (indentation instead of brackets, no semicolons, etc.) and added advanced features missing from CSS, such as variables, helper functions, and calculations. Here’s what the color section of our earlier example would look like using Sass with variables:\r\n\r\n```\r\n$dark-color: #4a4a4a\r\n$light-color: #f9f9f9\r\n$side-color: #eeebody\r\n  color: $dark-color\r\n  \r\nheader, footer\r\n  background-color: $dark-color\r\n  color: $light-color\r\n  \r\nmain\r\n  background: $light-colornav, aside\r\n  background: $side-color\r\n```\r\n\r\nNote how reusable variables are defined with the $ symbol, and that brackets and semicolons are eliminated, making for a cleaner looking syntax. The cleaner syntax in Sass is nice, but features like variables were revolutionary at the time, as they opened up new possibilities for writing clean and maintainable CSS.\r\n\r\nTo use Sass, you need to install Ruby, the programming language used to compile Sass code to regular CSS. Then you would need to install the Sass gem, then run a command in the command line to convert your .sass files into .css files. Here’s an example of what a command would look like:\r\n\r\n```\r\nsass --watch index.sass index.css\r\n```\r\n\r\nThis command will convert Sass code written in a file named index.sass to regular CSS in a file named index.css (the `--watch` argument tells it to run any time the input changes on save, which is convenient).\r\n\r\nThis process is known as a build step, and it was a pretty significant barrier to entry back in 2006. If you’re used to programming languages like Ruby, the process is pretty straightforward. But many frontend developers at the time only worked with HTML and CSS, which did not require any such tools. So it was a big ask to have someone learn an entire ecosystem to be able to get the features offered by a CSS preprocessor.\r\n\r\nIn 2009, the Less CSS preprocessor was released. It was also written in Ruby, and offered similar features to Sass. The key difference was the syntax, which was designed to be as close to CSS as possible. This means that any CSS code is valid Less code. Here’s the same example written using Less syntax:\r\n\r\n```\r\n@dark-color: #4a4a4a;\r\n@light-color: #f9f9f9;\r\n@side-color: #eee;body {\r\n  color: @dark-color;\r\n}\r\n  \r\nheader, footer {\r\n  background-color: @dark-color;\r\n  color: @light-color;\r\n}\r\n  \r\nmain {\r\n  background: @light-color;\r\n}nav, aside {\r\n  background: @side-color;\r\n}\r\n```\r\n\r\nIt’s nearly the same (`@` prefix instead of `$` for variables), but not as pretty as the Sass example, with the same curly brackets and semi-colons as CSS. Yet the fact that it’s closer to CSS made it easier for developers to adopt it. In 2012, Less was rewritten to use JavaScript (specifically Node.js) instead of Ruby for compiling. This made Less faster than its Ruby counterparts, and made it more appealing to developers who were already using Node.js in their workflows.\r\n\r\nTo convert this code to regular CSS, you would first need to install Node.js, then install Less, then run a command like:\r\n\r\n```\r\nlessc index.less index.css\r\n```\r\n\r\nThis command will convert Less code written in a file named index.less to regular CSS in a file named index.css. Note that the lessc command does not come with a way to watch files for changes (unlike the sass command), meaning you would need to install a different tool to automatically watch and compile .less files, adding a bit more complexity to the process. Again, this is not difficult for programmers who are used to using command line tools, but it is a significant barrier to entry for others who simply want to use a CSS preprocessor.\r\n\r\nAs Less gained mindshare, Sass developers adapted by adding a new syntax called SCSS in 2010 (which was a superset of CSS similar to Less). They also released LibSass, a C/C++ port of the Ruby Sass engine, which made it faster and able to be used in various languages.\r\n\r\nAnother alternative CSS preprocessor is Stylus, which came out in 2010, written in Node.js, and focuses on cleaner syntax compared to Sass or Less. Usually conversations about CSS preprocessors focus on those three as the most popular (Sass, Less, and Stylus). In the end, they are all pretty similar in terms of the features they offer, so you can’t really go wrong picking any of them.\r\n\r\nHowever, some people make the argument that CSS preprocessors are becoming less necessary, as browsers are finally beginning to implement some of their features (such as variables and calculations). Furthermore, there’s a different approach known as CSS postprocessing that has the potential to make CSS preprocessors obsolete (obviously not without controversy), which we’ll get into next.\r\n\r\n### Using a CSS postprocessor for transformative features\r\n\r\nA CSS postprocessor uses JavaScript to analyze and transform your CSS into valid CSS. In this sense it’s pretty similar to a CSS preprocessor — you can think of it as a different approach to solving the same problem. The key difference is that while a CSS preprocessor uses special syntax to identify what needs to be transformed, a CSS postprocessor can parse regular CSS and transform it without any special syntax required. This is best illustrated with an example. Let’s look at a part of the CSS we originally defined above to style the header tags:\r\n\r\n```\r\nh1, h2, h3, h4, h5, h6 {\r\n  -ms-hyphens: auto;\r\n  -moz-hyphens: auto;\r\n  -webkit-hyphens: auto;\r\n  hyphens: auto;\r\n}\r\n```\r\n\r\nThe items in bold are called vendor prefixes. Vendor prefixes are used by browsers when they are experimentally adding or testing new CSS features, giving a way for developers to use these new CSS properties while the implementation is being finalized. Here the -ms prefix is for Microsoft Internet Explorer, the -moz prefix is for Mozilla Firefox, and the -webkit prefix is for browsers using the webkit rendering engine (like Google Chrome, Safari, and newer versions of Opera).\r\n\r\nIt’s pretty annoying to remember to put in all these different vendor prefixes to use these CSS properties. It would be nice to have a tool that can automatically put in vendor prefixes as needed. We can sort of pull this off with CSS preprocessors. For example, you could do something like this with SCSS:\r\n\r\n```\r\n@mixin hyphens($value) {\r\n  -ms-hyphens: $value;\r\n  -moz-hyphens: $value;\r\n  -webkit-hyphens: $value;\r\n  hyphens: $value;\r\n}h1, h2, h3, h4, h5, h6 {\r\n  @include hyphens(auto);\r\n}\r\n```\r\n\r\nHere we’re using Sass’ mixin feature, which allows you to define a chunk of CSS once and reuse it anywhere else. When this file is compiled into regular CSS, any @include statements will be replaced with the CSS from the matching @mixin. Overall this isn’t a bad solution, but you are responsible for defining each mixin the first time for any CSS property requiring vendor prefixes. These mixin definitions will require maintenance, as you may want to remove specific vendor prefixes that you no longer need as browsers update their CSS compatibility.\r\n\r\nInstead of using mixins, it would be nice to simply write normal CSS and have a tool automatically identify properties that require prefixes and add them accordingly. A CSS postprocessor is capable of doing exactly that. For example, if you use PostCSS with the autoprefixer plugin, you can write completely normal CSS without any vendor prefixes and let the postprocessor do the rest of the work:\r\n\r\n```\r\nh1, h2, h3, h4, h5, h6 {\r\n  hyphens: auto;\r\n}\r\n```\r\n\r\nWhen you run the CSS postprocessor on this code, the result is the hyphens: auto; line gets replaced with all the appropriate vendor prefixes (as defined in the autoprefixer plugin, which you don’t need to directly manage). Meaning you can just write regular CSS without having to worry about any compatibility or special syntax, which is nice!\r\n\r\nThere are plugins other than autoprefixer for PostCSS that allow you to do really cool things. The cssnext plugin allows you to use experimental CSS features. The CSS modules plugin automatically changes classes to avoid name conflicts. The stylelint plugin identifies errors and inconsistent conventions in your CSS. These tools have really started to take off in the last year or two, showcasing developer workflows that has never been possible before!\r\n\r\nThere is a price to pay for this progress, however. Installing and using a CSS postprocessor like PostCSS is more involved compared to using a CSS preprocessor. Not only do you have to install and run tools using the command line, but you need to install and configure individual plugins and define a more complex set of rules (like which browsers you are targeting, etc.) Instead of running PostCSS straight from the command line, many developers integrate it into configurable build systems like Grunt, Gulp, or webpack, which help manage all the different build tools you might use in your frontend workflow.\r\n\r\n    Note: It can be quite overwhelming to learn all the necessary parts to making a modern frontend build system work if you’ve never used one before. If you want to get started from scratch, check out my article Modern JavaScript Explained For Dinosaurs, which goes over all the JavaScript tooling necessary to take advantage of these modern features for a frontend developer.\r\n\r\nIt’s worth noting that there is some debate around CSS postprocessors. Some argue that the terminology is confusing (one argument is that they should all be called CSS preprocessors, another argument is that they should just be simply called CSS processors, etc.). Some believe CSS postprocessors eliminate the need for CSS preprocessors altogether, some believe they should be used together. In any case, it’s clear that learning how to use a CSS postprocessor is worth it if you’re interested in pushing the edge of what’s possible with CSS.\r\n\r\n![modern-css-dinosaur-09.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312784/images/uplqm5alom18elrnkdvw.png)\r\n\r\n### Using CSS methodologies for maintainability\r\n\r\nTools like CSS preprocessors and CSS postprocessors go a long way towards improving the CSS development experience. But these tools alone aren’t enough to solve the problem of maintaining large CSS codebases. To address this, people began to document different guidelines on how to write CSS, generally referred to as CSS methodologies.\r\n\r\nBefore we dive into any particular CSS methodology, it’s important to understand what makes CSS hard to maintain over time. The key issue is the global nature of CSS — every style you define is globally applied to every part of the page. It becomes your job to either come up with a detailed naming convention to maintain unique class names or wrangle with specificity rules to determine which style gets applied any given element. CSS methodologies provide an organized way to write CSS in order to avoid these pain points with large code bases. Let’s take a look at some of the popular methodologies in rough chronological order.\r\n\r\n#### OOCSS\r\n\r\nOOCSS (Object Oriented CSS) was first presented in 2009 as a methodology organized around two main principles. The first principle is separate structure and skin. This means the CSS to define the structure (like layout) shouldn’t be mixed together with the CSS to define the skin (like colors, fonts, etc.). This makes it easier to “re-skin” an application. The second principle is separate container and content. This means think of elements as re-usable objects, with the key idea being that an object should look the same regardless of where it is on the page.\r\n\r\nOOCSS provides well thought out guidelines, but isn’t very prescriptive on the specifics of the approach. Later approaches like SMACSS took the core concepts and added more detail to make it easier to get started.\r\n\r\n#### SMACSS\r\n\r\nSMACSS (Scalable and Modular Architecture for CSS) was introduced in 2011 as a methodology based around writing your CSS in 5 distinct categories — base rules, layout rules, modules, state rules, and theme rules. The SMACSS methodology also recommends some naming conventions. For layout rules, you would prefix class names with l- or layout-. For state rules, you would prefix class names that describe the state, like is-hidden or is-collapsed.\r\n\r\nSMACSS has a lot more specifics in its approach compared to OOCSS, but it still requires some careful thought in deciding what CSS rules should go into which category. Later approaches like BEM took away some of this decision making to make it even easier to adopt.\r\n\r\n#### BEM\r\n\r\nBEM (Block, Element, Modifier) was introduced in 2010 as a methodology organized around the idea of dividing the user interface into independent blocks. A block is a re-usable component (an example would be a search form, defined as `<form class=\"search-form\"></form>`). An element is a smaller part of a block that can’t be re-used on its own (an example would be a button within the search form, defined as `<button class=\"search-form__button\">Search</button>`). A modifier is an entity that defines the appearance, state, or behavior of a block or element (an example would be a disabled search form button, defined as `<button class=\"search-form__button search-form__button--disabled\">Search</button>`).\r\n\r\nThe BEM methodology is simple to understand, with a specific naming convention that allows newcomers to apply it without having to make complex decisions. The downside for some is that the class names can be quite verbose, and don’t follow traditional rules for writing semantic class names. Later approaches like Atomic CSS would take this untraditional approach to a whole other level!\r\n\r\n#### Atomic CSS\r\n\r\nAtomic CSS (also known as Functional CSS) was introduced in 2014 as a methodology organized around the idea of creating small, single-purpose classes with names based on visual function. This approach is in complete opposition with OOCSS, SMACSS, and BEM — instead of treating elements on the page as re-usable objects, Atomic CSS ignores these objects altogether and uses re-usable single purpose utility classes to style each element. So instead of something like `<button class=\"search-form__button\">Search</button>`, you would have something like `<button class=\"f6 br3 ph3 pv2 white bg-purple hover-bg-light-purple\">Search</button>`.\r\n\r\nIf your first reaction to this example is to recoil in horror, you’re not alone — many people saw this methodology as a complete violation of established CSS best practices. However, there has been a lot of excellent discussion around the idea of questioning the effectiveness of those best practices in different scenarios. This article does a great job highlighting how traditional separation of concerns ends up creating CSS that depends on the HTML (even when using methodologies like BEM), while an atomic or functional approach is about creating HTML that depends on the CSS. Neither is wrong, but upon close inspection you can see that a true separation of concerns between CSS and HTML is never fully achievable!\r\n\r\nOther CSS methodologies like CSS in JS actually embrace the notion that CSS and HTML will always depend on each other, leading to one of the most controversial methodologies yet…\r\n\r\n#### CSS in JS\r\n\r\nCSS in JS was introduced in 2014 as a methodology organized around defining CSS styles not in a separate style sheet, but directly in each component itself. It was introduced as an approach for the React JavaScript framework (which already took the controversial approach of defining the HTML for a component directly in JavaScript instead of a separate HTML file). Originally the methodology used inline styles, but later implementations used JavaScript to generate CSS (with unique class names based on the component) and insert it into the document with a style tag.\r\n\r\nThe CSS in JS methodology once again goes completely against established CSS best practices of separation of concerns. This is because the way we use the web has shifted dramatically over time. Originally the web largely consisted of static web sites — here the separation of HTML content from CSS presentation makes a lot of sense. Nowadays the web is used for creating dynamic web applications — here it makes sense to separate things out by re-usable components.\r\n\r\nThe goal of the CSS in JS methodology is to be able to define components with hard boundaries that consist of their own encapsulated HTML/CSS/JS, such that the CSS in one component has no chance of affecting any other components. React was one of the first widely adopted frameworks that pushed for these components with hard boundaries, influencing other major frameworks like Angular, Ember, and Vue.js to follow suit. It’s important to note that the CSS in JS methodology is relatively new, and there’s a lot of experimentation going on in this space as developers try to establish new best practices for CSS in the age of components for web applications.\r\n\r\nIt’s easy to get overwhelmed by the many different CSS methodologies that are out there, but it’s important to keep in mind that there is no one right approach — you should think of them as different possible tools you can use when you have a sufficiently complex CSS codebase. Having different well-thought-out options to choose from works in your favor, and all the recent experimentation happening in this space benefits every developer in the long run!\r\n\r\n### Conclusion\r\n\r\nSo this is modern CSS in a nutshell. We covered using CSS for basic styling with typographic properties, using CSS for layout using float, flexbox, and grid based approaches, using a CSS preprocessor for new syntax such as variables and mixins, using a CSS postprocessor for transformative features such as adding vendor prefixes, and using CSS methodologies for maintainability to overcome the global nature of CSS styles. We didn’t get a chance to dig into a lot of other features CSS has to offer, like advanced selectors, transitions, animations, shapes, dynamic variables — the list goes on and on. There’s a lot of ground to cover with CSS — anyone who says it’s easy probably doesn’t know the half of it!\r\n\r\nModern CSS can definitely be frustrating to work with as it continues to change and evolve at a rapid pace. But it’s important to remember the historical context of how the web has evolved over time, and it’s good to know that there are a lot of smart people out there willing to build concrete tools and methodologies to help CSS best practices evolve right along with the web. It’s an exciting time to be a developer, and I hope this information can serve as a roadmap to help you on your journey!\r\n\r\n![modern-css-dinosaur-10.png](https://res.cloudinary.com/recollectionspace/image/upload/v1566312751/images/b75exdbmzkerz6ltdiep.png)\r\n\r\nSpecial thanks again to @ryanqnorth’s Dinosaur Comics, which has served up some of the finest absurdist humor since 2003 (when dinosaurs ruled the web).", user_collection_id: 28, x: 1294.27260716832, y: 1071.2482198493, width: 1129, height: 735, angle: 0.0, scale: 0.173721019345728, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1566312873/records/sjfohzgfew4kcr1hvhta.png", color: "#000", zindex: 1, rendered_description: "<p>CSS is strangely considered both one of the easiest and one of the hardest languages to learn as a web developer. It’s certainly easy enough to get started with it — you define style properties and values to apply to specific elements, and…that’s pretty much all you need to get going! However, it gets tangled and complicated to organize CSS in a meaningful way for larger projects. Changing any line of CSS to style an element on one page often leads to unintended changes for elements on other pages.</p>\n\n<p>In order to deal with the inherent complexity of CSS, all sorts of different best practices have been established. The problem is that there isn’t any strong consensus on which best practices are in fact the best, and many of them seem to completely contradict each other. If you’re trying to learn CSS for the first time, this can be disorienting to say the least.</p>\n\n<p>The goal of this article is to provide a historical context of how CSS approaches and tooling have evolved to what they are today in 2018. By understanding this history, it will be easier to understand each approach and how to use them to your benefit. Let’s get started!</p>\n\n<h3>Using CSS for basic styling</h3>\n\n<p>Let’s start with a basic website using just a simple index.html file that links to a separate index.css file:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;title&gt;Modern CSS&lt;/title&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;header&gt;This is the header.&lt;/header&gt;\n  &lt;main&gt;\n    &lt;h1&gt;This is the main content.&lt;/h1&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/main&gt;\n  &lt;nav&gt;\n    &lt;h4&gt;This is the navigation section.&lt;/h4&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/nav&gt;\n  &lt;aside&gt;\n    &lt;h4&gt;This is an aside section.&lt;/h4&gt;\n    &lt;p&gt;...&lt;/p&gt;\n  &lt;/aside&gt;\n  &lt;footer&gt;This is the footer.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Right now we aren’t using any classes or ids in the HTML, just semantic tags. Without any CSS, the website looks like this (using placeholder text):</p>\n\n<p><img src=\"https://res.cloudinary.com/recollectionspace/image/upload/v1566312299/images/ha15lzuobge9m4ikyzmt.png\" alt=\"modern-css-dinosaur-02.png\">\n<em>Click here to see a live example</em></p>\n\n<p>Functional, but not very pretty. We can add CSS to improve the basic typography in index.css:</p>\n\n<pre><code>/* BASIC TYPOGRAPHY */\n/* from https://github.com/oxalorg/sakura */html {\n  font-size: 62.5%;\n  font-family: serif;\n}body {\n  font-size: 1.8rem;\n  line-height: 1.618;\n  max-width: 38em;\n  margin: auto;\n  color: #4a4a4a;\n  background-color: #f9f9f9;\n  padding: 13px;\n}@media (max-width: 684px) {\n  body {\n    font-size: 1.53rem;\n  }\n}@media (max-width: 382px) {\n  body {\n    font-size: 1.35rem;\n  }\n}h1, h2, h3, h4, h5, h6 {\n  line-height: 1.1;\n  font-family: Verdana, Geneva, sans-serif;\n  font-weight: 700;\n  overflow-wrap: break-word;\n  word-wrap: break-word;\n  -ms-word-break: break-all;\n  word-break: break-word;\n  -ms-hyphens: auto;\n  -moz-hyphens: auto;\n  -webkit-hyphens: auto;\n  hyphens: auto;\n}h1 {\n  font-size: 2.35em;\n}h2 {\n  font-size: 2em;\n}h3 {\n  font-size: 1.75em;\n}h4 {\n  font-size: 1.5em;\n}h5 {\n  font-size: 1.25em;\n}h6 {\n  font-size: 1em;\n}\n</code></pre>\n\n<p>Here most of the CSS is styling the typography (fonts with sizes, line height, etc.), with some styling for the colors and a centered layout. You’d have to study design to know good values to choose for each of these properties (these styles are from sakura.css), but the CSS itself that’s being applied here isn’t too complicated to read. The result looks like this:</p>\n\n<p><img src=\"https://res.cloudinary.com/recollectionspace/image/upload/v1566312355/images/bm2dy8aent7wakz4rfnl.png\" alt=\"modern-css-dinosaur-03.png\">\n<em>Click here to see a live example</em></p>\n\n<p>What a difference! This is the promise of CSS — a simple way to add styles to a document, without requiring programming or complex logic. Unfortunately, things start to get hairier when we use CSS for more than just typography and colors (which we’ll tackle next).</p>\n\n<h3>Using CSS for layout</h3>\n\n<p>In the 1990s, before CSS gained wide adoption, there weren’t a lot of options to layout content on the page. HTML was originally designed as a language to create plain documents, not dynamic websites with sidebars, columns, etc. In those early days, layout was often done using HTML tables — the entire webpage would be within a table, which could be used to organize the content in rows and columns. This approach worked, but the downside was the tight coupling of content and presentation — if you wanted to change the layout of a site, it would require rewriting significant amounts of HTML.</p>\n\n<p>Once CSS entered the scene, there was a strong push to keep content (written in the HTML) separate from presentation (written in the CSS). So people found ways to move all layout code out of HTML (no more tables) into CSS. It’s important to note that like HTML, CSS wasn’t really designed to layout content on a page either, so early attempts at this separation of concerns were difficult to achieve gracefully.</p>\n\n<p>Let’s take a look at how this works in practice with our above example. Before we define any CSS layout, we’ll first reset any margins and paddings (which affect layout calculations) as well as give section distinct colors (not to make it pretty, but to make each section visually stand out when testing different layouts).</p>\n\n<pre><code>/* RESET LAYOUT AND ADD COLORS */body {\n  margin: 0;\n  padding: 0;\n  max-width: inherit;\n  background: #fff;\n  color: #4a4a4a;\n}header, footer {\n  font-size: large;\n  text-align: center;\n  padding: 0.3em 0;\n  background-color: #4a4a4a;\n  color: #f9f9f9;\n}nav {\n  background: #eee;\n}main {\n  background: #f9f9f9;\n}aside {\n  background: #eee;\n}\n</code></pre>\n\n<p>Now the website temporarily looks like:</p>\n\n<p><img src=\"https://res.cloudinary.com/recollectionspace/image/upload/v1566312419/images/x0xnclhrk2uue3az1sti.png\" alt=\"modern-css-dinosaur-04.png\">\n<em>Click here to see a live example</em></p>\n\n<p>Now we’re ready to use CSS to layout the content on the page. We’ll look at three different approaches in chronological order, starting with the classic float-based layouts.</p>\n\n<h4>Float-based layout</h4>\n\n<p>The CSS float property was originally introduced to float an image inside a column of text on the left or right (something you often see in newspapers). Web developers in the early 2000s took advantage of the fact that you could float not just images, but any element, meaning you could create the illusion of rows and columns by floating entire divs of content. But again, floats weren’t designed for this purpose, so creating this illusion was difficult to pull off in a consistent fashion.</p>\n\n<p>In 2006, A List Apart published the popular article In Search of the Holy Grail, which outlined a detailed and thorough approach to creating what was known as the Holy Grail layout — a header, three columns and a footer. It’s pretty crazy to think that what sounds like a fairly straightforward layout would be referred to as the Holy Grail, but that was indeed how hard it was to create consistent layout at the time using pure CSS.</p>\n\n<p>Below is a float-based layout for our example based on the technique described in that article:</p>\n\n<pre><code>/* FLOAT-BASED LAYOUT */body {\n  padding-left: 200px;\n  padding-right: 190px;\n  min-width: 240px;\n}header, footer {\n  margin-left: -200px;\n  margin-right: -190px;   \n}main, nav, aside {\n  position: relative;\n  float: left;\n}main {\n  padding: 0 20px;\n  width: 100%;\n}nav {\n  width: 180px;\n  padding: 0 10px;\n  right: 240px;\n  margin-left: -100%;\n}aside {\n  width: 130px;\n  padding: 0 10px;\n  margin-right: -100%;\n}footer {\n  clear: both;\n}* html nav {\n  left: 150px;\n}\n</code></pre>\n\n<p>Looking at the CSS, you can see there are quite a few hacks necessary to get it to work (negative margins, the clear: both property, hard-coded width calculations, etc.) — the article does a good job explaining the reasoning for each in detail. Below is what the result looks like:</p>\n\n<p><img src=\"https://res.cloudinary.com/recollectionspace/image/upload/v1566312470/images/wbwc8qffmqiavmaipl5i.png\" alt=\"modern-css-dinosaur-05.png\">\n<em>Click here to see a live example</em></p>\n\n<p>This is nice, but you can see from the colors that the three columns are not equal in height, and the page doesn’t fill the height of the screen. These issues are inherent with a float-based approach. All a float can do is place content to the left or right of a section — the CSS has no way to infer the heights of the content in the other sections. This problem had no straightforward solution until many years later, with a flexbox-based layout.</p>\n\n<h4>Flexbox-based layout</h4>\n\n<p>The flexbox CSS property was first proposed in 2009, but didn’t get widespread browser adoption until around 2015. Flexbox was designed to define how space is distributed across a single column or row, which makes it a better candidate for defining layout compared to using floats. This meant that after about a decade of using float-based layouts, web developers were finally able to use CSS for layout without the need for the hacks needed with floats.</p>\n\n<p>Below is a flexbox-based layout for our example based on the technique described on the site Solved by Flexbox (a popular resource showcasing different flexbox examples). Note that in order to make flexbox work, we need to an an extra wrapper div around the three columns in the HTML:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot;&gt;\n  &lt;title&gt;Modern CSS&lt;/title&gt;\n  &lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;header&gt;This is the header.&lt;/header&gt;\n  &lt;div class=&quot;container&quot;&gt;\n    &lt;main&gt;\n      &lt;h1&gt;This is the main content.&lt;/h1&gt;\n      &lt;p&gt;...&lt;/p&gt;\n    &lt;/main&gt;\n    &lt;nav&gt;\n      &lt;h4&gt;This is the navigation section.&lt;/h4&gt;\n      &lt;p&gt;...&lt;/p&gt;\n    &lt;/nav&gt;\n    &lt;aside&gt;\n      &lt;h4&gt;This is an aside section.&lt;/h4&gt;\n      &lt;p&gt;...&lt;/p&gt;\n    &lt;/aside&gt;\n  &lt;/div&gt;\n  &lt;footer&gt;This is the footer.&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>And here’s the flexbox code in the CSS:</p>\n\n<pre><code>/* FLEXBOX-BASED LAYOUT */body {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}.container {\n  display: flex;\n  flex: 1;\n}main {\n  flex: 1;\n  padding: 0 20px;\n}nav {\n  flex: 0 0 180px;\n  padding: 0 10px;\n  order: -1;\n}aside {\n  flex: 0 0 130px;\n  padding: 0 10px;\n}\n</code></pre>\n\n<p>That is way, way more compact compared to the float-based layout approach! The flexbox properties and values are a bit confusing at first glance, but it eliminates the need for a lot of the hacks like negative margins that were necessary with float-based layouts — a huge win. Here is what the result looks like:</p>\n\n<p><img src=\"https://res.cloudinary.com/recollectionspace/image/upload/v1566312861/images/liegzpoogzxy6s0kmyms.png\" alt=\"modern-css-dinosaur-06.png\">\n<em>Click here for a live example</em></p>\n\n<p>Much better! The columns are all equal height and take up the full height of the page. In some sense this seems perfect, but there are a couple of minor downsides to this approach. One is browser support — currently every modern browser supports flexbox, but some older browsers never will. Fortunately browser vendors are making a bigger push to end support for these older browsers, making a more consistent development experience for web designers. Another downside is the fact that we needed to add the <code>&lt;div class=&quot;container&quot;&gt;</code> to the markup — it would be nice to avoid it. In an ideal world, any CSS layout wouldn’t require changing the HTML markup at all.</p>\n\n<p>The biggest downside though is the code in the CSS itself — flexbox eliminates a lot of the float hacks, but the code isn’t as expressive as it could be for defining layout. It’s hard to read the flexbox CSS and get a visual understanding how all of the elements will be laid out on the page. This leads to a lot of guessing and checking when writing flexbox-based layouts.</p>\n\n<p>It’s important to note again that flexbox was designed to space elements within a single column or row — it was not designed for an entire page layout! Even though it does a serviceable job (much better than float-based layouts), a different specification was specifically developed to handle layouts with multiple rows and columns. This specification is known as CSS grid.</p>\n\n<h4>Grid-based layout</h4>\n\n<p>CSS grid was first proposed in 2011 (not too long after the flexbox proposal), but took a long time to gain widespread adoption with browsers. As of early 2018, CSS grid is supported by most modern browsers (a huge improvement over even a year or two ago).</p>\n\n<p>Below is a grid-based layout for our example based on the first method in this CSS tricks article. Note that for this example, we can get rid of the <code>&lt;div class=&quot;container&quot;&gt;</code> that we had to add for the flexbox-based layout — we can simply use the original HTML without modification. Here’s what the CSS looks like:</p>\n\n<pre><code>/* GRID-BASED LAYOUT */body {\n  display: grid;\n  min-height: 100vh;\n  grid-template-columns: 200px 1fr 150px;\n  grid-template-rows: min-content 1fr min-content;\n}header {\n  grid-row: 1;\n  grid-column: 1 / 4;\n}nav {\n  grid-row: 2;\n  grid-column: 1 / 2;\n  padding: 0 10px;\n}main {\n  grid-row: 2;\n  grid-column: 2 / 3;\n  padding: 0 20px;\n}aside {\n  grid-row: 2;\n  grid-column: 3 / 4;\n  padding: 0 10px;\n}footer {\n  grid-row: 3;\n  grid-column: 1 / 4;\n}\n</code></pre>\n\n<p>The result is visually identical to the flexbox based layout. However, the CSS here is much improved in the sense that it clearly expresses the desired layout. The size and shape of the columns and rows are defined in the body selector, and each item in the grid is defined directly by its position.</p>\n\n<p>One thing that can be confusing is the grid-column property, which defines the start point / end point of the column. It can be confusing because in this example, there are 3 columns, but the numbers range from 1 to 4. It becomes more clear when you look at the picture below:</p>\n\n<p><img src=\"https://res.cloudinary.com/recollectionspace/image/upload/v1566312841/images/d2u7qnlohvos0x6zgxql.png\" alt=\"modern-css-dinosaur-07.png\">\n<em>Click here to see a live example</em></p>\n\n<p>The first column starts at 1 and ends at 2, the second column starts at 2 and ends at 3, and the third column starts at 3 and ends at 4. The header has a grid-column of 1 / 4 to span the entire page, the nav has a grid-column of 1 / 2 to span the first column, etc.</p>\n\n<p>Once you get used to the grid syntax, it clearly becomes the ideal way to express layout in CSS. The only real downside to a grid-based layout is browser support, which again has improved tremendously over the past year. It’s hard to overstate the importance of CSS grid as the first real tool in CSS that was actually designed for layout. In some sense, web designers have always had to be very conservative with making creative layouts, since the tools up until now have been fragile, using various hacks and workarounds. Now that CSS grid exists, there is the potential for a new wave of creative layout designs that never would have been possible before — exciting times!</p>\n\n<p><img src=\"https://res.cloudinary.com/recollectionspace/image/upload/v1566312811/images/ib8se73xxnbvzatrjwcn.png\" alt=\"modern-css-dinosaur-08.png\"></p>\n\n<h3>Using a CSS preprocessor for new syntax</h3>\n\n<p>So far we’ve covered using CSS for basic styling as well as layout. Now we’ll get into tooling that was created to help improve the experience of working with CSS as a language itself, starting with CSS preprocessors.</p>\n\n<p>A CSS preprocessor allows you to write styles using a different language which gets converted into CSS that the browser can understand. This was critical back in the day when browsers were very slow to implement new features. The first major CSS preprocessor was Sass, released in 2006. It featured a new concise syntax (indentation instead of brackets, no semicolons, etc.) and added advanced features missing from CSS, such as variables, helper functions, and calculations. Here’s what the color section of our earlier example would look like using Sass with variables:</p>\n\n<pre><code>$dark-color: #4a4a4a\n$light-color: #f9f9f9\n$side-color: #eeebody\n  color: $dark-color\n\nheader, footer\n  background-color: $dark-color\n  color: $light-color\n\nmain\n  background: $light-colornav, aside\n  background: $side-color\n</code></pre>\n\n<p>Note how reusable variables are defined with the $ symbol, and that brackets and semicolons are eliminated, making for a cleaner looking syntax. The cleaner syntax in Sass is nice, but features like variables were revolutionary at the time, as they opened up new possibilities for writing clean and maintainable CSS.</p>\n\n<p>To use Sass, you need to install Ruby, the programming language used to compile Sass code to regular CSS. Then you would need to install the Sass gem, then run a command in the command line to convert your .sass files into .css files. Here’s an example of what a command would look like:</p>\n\n<pre><code>sass --watch index.sass index.css\n</code></pre>\n\n<p>This command will convert Sass code written in a file named index.sass to regular CSS in a file named index.css (the <code>--watch</code> argument tells it to run any time the input changes on save, which is convenient).</p>\n\n<p>This process is known as a build step, and it was a pretty significant barrier to entry back in 2006. If you’re used to programming languages like Ruby, the process is pretty straightforward. But many frontend developers at the time only worked with HTML and CSS, which did not require any such tools. So it was a big ask to have someone learn an entire ecosystem to be able to get the features offered by a CSS preprocessor.</p>\n\n<p>In 2009, the Less CSS preprocessor was released. It was also written in Ruby, and offered similar features to Sass. The key difference was the syntax, which was designed to be as close to CSS as possible. This means that any CSS code is valid Less code. Here’s the same example written using Less syntax:</p>\n\n<pre><code>@dark-color: #4a4a4a;\n@light-color: #f9f9f9;\n@side-color: #eee;body {\n  color: @dark-color;\n}\n\nheader, footer {\n  background-color: @dark-color;\n  color: @light-color;\n}\n\nmain {\n  background: @light-color;\n}nav, aside {\n  background: @side-color;\n}\n</code></pre>\n\n<p>It’s nearly the same (<code>@</code> prefix instead of <code>$</code> for variables), but not as pretty as the Sass example, with the same curly brackets and semi-colons as CSS. Yet the fact that it’s closer to CSS made it easier for developers to adopt it. In 2012, Less was rewritten to use JavaScript (specifically Node.js) instead of Ruby for compiling. This made Less faster than its Ruby counterparts, and made it more appealing to developers who were already using Node.js in their workflows.</p>\n\n<p>To convert this code to regular CSS, you would first need to install Node.js, then install Less, then run a command like:</p>\n\n<pre><code>lessc index.less index.css\n</code></pre>\n\n<p>This command will convert Less code written in a file named index.less to regular CSS in a file named index.css. Note that the lessc command does not come with a way to watch files for changes (unlike the sass command), meaning you would need to install a different tool to automatically watch and compile .less files, adding a bit more complexity to the process. Again, this is not difficult for programmers who are used to using command line tools, but it is a significant barrier to entry for others who simply want to use a CSS preprocessor.</p>\n\n<p>As Less gained mindshare, Sass developers adapted by adding a new syntax called SCSS in 2010 (which was a superset of CSS similar to Less). They also released LibSass, a C/C++ port of the Ruby Sass engine, which made it faster and able to be used in various languages.</p>\n\n<p>Another alternative CSS preprocessor is Stylus, which came out in 2010, written in Node.js, and focuses on cleaner syntax compared to Sass or Less. Usually conversations about CSS preprocessors focus on those three as the most popular (Sass, Less, and Stylus). In the end, they are all pretty similar in terms of the features they offer, so you can’t really go wrong picking any of them.</p>\n\n<p>However, some people make the argument that CSS preprocessors are becoming less necessary, as browsers are finally beginning to implement some of their features (such as variables and calculations). Furthermore, there’s a different approach known as CSS postprocessing that has the potential to make CSS preprocessors obsolete (obviously not without controversy), which we’ll get into next.</p>\n\n<h3>Using a CSS postprocessor for transformative features</h3>\n\n<p>A CSS postprocessor uses JavaScript to analyze and transform your CSS into valid CSS. In this sense it’s pretty similar to a CSS preprocessor — you can think of it as a different approach to solving the same problem. The key difference is that while a CSS preprocessor uses special syntax to identify what needs to be transformed, a CSS postprocessor can parse regular CSS and transform it without any special syntax required. This is best illustrated with an example. Let’s look at a part of the CSS we originally defined above to style the header tags:</p>\n\n<pre><code>h1, h2, h3, h4, h5, h6 {\n  -ms-hyphens: auto;\n  -moz-hyphens: auto;\n  -webkit-hyphens: auto;\n  hyphens: auto;\n}\n</code></pre>\n\n<p>The items in bold are called vendor prefixes. Vendor prefixes are used by browsers when they are experimentally adding or testing new CSS features, giving a way for developers to use these new CSS properties while the implementation is being finalized. Here the -ms prefix is for Microsoft Internet Explorer, the -moz prefix is for Mozilla Firefox, and the -webkit prefix is for browsers using the webkit rendering engine (like Google Chrome, Safari, and newer versions of Opera).</p>\n\n<p>It’s pretty annoying to remember to put in all these different vendor prefixes to use these CSS properties. It would be nice to have a tool that can automatically put in vendor prefixes as needed. We can sort of pull this off with CSS preprocessors. For example, you could do something like this with SCSS:</p>\n\n<pre><code>@mixin hyphens($value) {\n  -ms-hyphens: $value;\n  -moz-hyphens: $value;\n  -webkit-hyphens: $value;\n  hyphens: $value;\n}h1, h2, h3, h4, h5, h6 {\n  @include hyphens(auto);\n}\n</code></pre>\n\n<p>Here we’re using Sass’ mixin feature, which allows you to define a chunk of CSS once and reuse it anywhere else. When this file is compiled into regular CSS, any @include statements will be replaced with the CSS from the matching @mixin. Overall this isn’t a bad solution, but you are responsible for defining each mixin the first time for any CSS property requiring vendor prefixes. These mixin definitions will require maintenance, as you may want to remove specific vendor prefixes that you no longer need as browsers update their CSS compatibility.</p>\n\n<p>Instead of using mixins, it would be nice to simply write normal CSS and have a tool automatically identify properties that require prefixes and add them accordingly. A CSS postprocessor is capable of doing exactly that. For example, if you use PostCSS with the autoprefixer plugin, you can write completely normal CSS without any vendor prefixes and let the postprocessor do the rest of the work:</p>\n\n<pre><code>h1, h2, h3, h4, h5, h6 {\n  hyphens: auto;\n}\n</code></pre>\n\n<p>When you run the CSS postprocessor on this code, the result is the hyphens: auto; line gets replaced with all the appropriate vendor prefixes (as defined in the autoprefixer plugin, which you don’t need to directly manage). Meaning you can just write regular CSS without having to worry about any compatibility or special syntax, which is nice!</p>\n\n<p>There are plugins other than autoprefixer for PostCSS that allow you to do really cool things. The cssnext plugin allows you to use experimental CSS features. The CSS modules plugin automatically changes classes to avoid name conflicts. The stylelint plugin identifies errors and inconsistent conventions in your CSS. These tools have really started to take off in the last year or two, showcasing developer workflows that has never been possible before!</p>\n\n<p>There is a price to pay for this progress, however. Installing and using a CSS postprocessor like PostCSS is more involved compared to using a CSS preprocessor. Not only do you have to install and run tools using the command line, but you need to install and configure individual plugins and define a more complex set of rules (like which browsers you are targeting, etc.) Instead of running PostCSS straight from the command line, many developers integrate it into configurable build systems like Grunt, Gulp, or webpack, which help manage all the different build tools you might use in your frontend workflow.</p>\n\n<pre><code>Note: It can be quite overwhelming to learn all the necessary parts to making a modern frontend build system work if you’ve never used one before. If you want to get started from scratch, check out my article Modern JavaScript Explained For Dinosaurs, which goes over all the JavaScript tooling necessary to take advantage of these modern features for a frontend developer.\n</code></pre>\n\n<p>It’s worth noting that there is some debate around CSS postprocessors. Some argue that the terminology is confusing (one argument is that they should all be called CSS preprocessors, another argument is that they should just be simply called CSS processors, etc.). Some believe CSS postprocessors eliminate the need for CSS preprocessors altogether, some believe they should be used together. In any case, it’s clear that learning how to use a CSS postprocessor is worth it if you’re interested in pushing the edge of what’s possible with CSS.</p>\n\n<p><img src=\"https://res.cloudinary.com/recollectionspace/image/upload/v1566312784/images/uplqm5alom18elrnkdvw.png\" alt=\"modern-css-dinosaur-09.png\"></p>\n\n<h3>Using CSS methodologies for maintainability</h3>\n\n<p>Tools like CSS preprocessors and CSS postprocessors go a long way towards improving the CSS development experience. But these tools alone aren’t enough to solve the problem of maintaining large CSS codebases. To address this, people began to document different guidelines on how to write CSS, generally referred to as CSS methodologies.</p>\n\n<p>Before we dive into any particular CSS methodology, it’s important to understand what makes CSS hard to maintain over time. The key issue is the global nature of CSS — every style you define is globally applied to every part of the page. It becomes your job to either come up with a detailed naming convention to maintain unique class names or wrangle with specificity rules to determine which style gets applied any given element. CSS methodologies provide an organized way to write CSS in order to avoid these pain points with large code bases. Let’s take a look at some of the popular methodologies in rough chronological order.</p>\n\n<h4>OOCSS</h4>\n\n<p>OOCSS (Object Oriented CSS) was first presented in 2009 as a methodology organized around two main principles. The first principle is separate structure and skin. This means the CSS to define the structure (like layout) shouldn’t be mixed together with the CSS to define the skin (like colors, fonts, etc.). This makes it easier to “re-skin” an application. The second principle is separate container and content. This means think of elements as re-usable objects, with the key idea being that an object should look the same regardless of where it is on the page.</p>\n\n<p>OOCSS provides well thought out guidelines, but isn’t very prescriptive on the specifics of the approach. Later approaches like SMACSS took the core concepts and added more detail to make it easier to get started.</p>\n\n<h4>SMACSS</h4>\n\n<p>SMACSS (Scalable and Modular Architecture for CSS) was introduced in 2011 as a methodology based around writing your CSS in 5 distinct categories — base rules, layout rules, modules, state rules, and theme rules. The SMACSS methodology also recommends some naming conventions. For layout rules, you would prefix class names with l- or layout-. For state rules, you would prefix class names that describe the state, like is-hidden or is-collapsed.</p>\n\n<p>SMACSS has a lot more specifics in its approach compared to OOCSS, but it still requires some careful thought in deciding what CSS rules should go into which category. Later approaches like BEM took away some of this decision making to make it even easier to adopt.</p>\n\n<h4>BEM</h4>\n\n<p>BEM (Block, Element, Modifier) was introduced in 2010 as a methodology organized around the idea of dividing the user interface into independent blocks. A block is a re-usable component (an example would be a search form, defined as <code>&lt;form class=&quot;search-form&quot;&gt;&lt;/form&gt;</code>). An element is a smaller part of a block that can’t be re-used on its own (an example would be a button within the search form, defined as <code>&lt;button class=&quot;search-form__button&quot;&gt;Search&lt;/button&gt;</code>). A modifier is an entity that defines the appearance, state, or behavior of a block or element (an example would be a disabled search form button, defined as <code>&lt;button class=&quot;search-form__button search-form__button--disabled&quot;&gt;Search&lt;/button&gt;</code>).</p>\n\n<p>The BEM methodology is simple to understand, with a specific naming convention that allows newcomers to apply it without having to make complex decisions. The downside for some is that the class names can be quite verbose, and don’t follow traditional rules for writing semantic class names. Later approaches like Atomic CSS would take this untraditional approach to a whole other level!</p>\n\n<h4>Atomic CSS</h4>\n\n<p>Atomic CSS (also known as Functional CSS) was introduced in 2014 as a methodology organized around the idea of creating small, single-purpose classes with names based on visual function. This approach is in complete opposition with OOCSS, SMACSS, and BEM — instead of treating elements on the page as re-usable objects, Atomic CSS ignores these objects altogether and uses re-usable single purpose utility classes to style each element. So instead of something like <code>&lt;button class=&quot;search-form__button&quot;&gt;Search&lt;/button&gt;</code>, you would have something like <code>&lt;button class=&quot;f6 br3 ph3 pv2 white bg-purple hover-bg-light-purple&quot;&gt;Search&lt;/button&gt;</code>.</p>\n\n<p>If your first reaction to this example is to recoil in horror, you’re not alone — many people saw this methodology as a complete violation of established CSS best practices. However, there has been a lot of excellent discussion around the idea of questioning the effectiveness of those best practices in different scenarios. This article does a great job highlighting how traditional separation of concerns ends up creating CSS that depends on the HTML (even when using methodologies like BEM), while an atomic or functional approach is about creating HTML that depends on the CSS. Neither is wrong, but upon close inspection you can see that a true separation of concerns between CSS and HTML is never fully achievable!</p>\n\n<p>Other CSS methodologies like CSS in JS actually embrace the notion that CSS and HTML will always depend on each other, leading to one of the most controversial methodologies yet…</p>\n\n<h4>CSS in JS</h4>\n\n<p>CSS in JS was introduced in 2014 as a methodology organized around defining CSS styles not in a separate style sheet, but directly in each component itself. It was introduced as an approach for the React JavaScript framework (which already took the controversial approach of defining the HTML for a component directly in JavaScript instead of a separate HTML file). Originally the methodology used inline styles, but later implementations used JavaScript to generate CSS (with unique class names based on the component) and insert it into the document with a style tag.</p>\n\n<p>The CSS in JS methodology once again goes completely against established CSS best practices of separation of concerns. This is because the way we use the web has shifted dramatically over time. Originally the web largely consisted of static web sites — here the separation of HTML content from CSS presentation makes a lot of sense. Nowadays the web is used for creating dynamic web applications — here it makes sense to separate things out by re-usable components.</p>\n\n<p>The goal of the CSS in JS methodology is to be able to define components with hard boundaries that consist of their own encapsulated HTML/CSS/JS, such that the CSS in one component has no chance of affecting any other components. React was one of the first widely adopted frameworks that pushed for these components with hard boundaries, influencing other major frameworks like Angular, Ember, and Vue.js to follow suit. It’s important to note that the CSS in JS methodology is relatively new, and there’s a lot of experimentation going on in this space as developers try to establish new best practices for CSS in the age of components for web applications.</p>\n\n<p>It’s easy to get overwhelmed by the many different CSS methodologies that are out there, but it’s important to keep in mind that there is no one right approach — you should think of them as different possible tools you can use when you have a sufficiently complex CSS codebase. Having different well-thought-out options to choose from works in your favor, and all the recent experimentation happening in this space benefits every developer in the long run!</p>\n\n<h3>Conclusion</h3>\n\n<p>So this is modern CSS in a nutshell. We covered using CSS for basic styling with typographic properties, using CSS for layout using float, flexbox, and grid based approaches, using a CSS preprocessor for new syntax such as variables and mixins, using a CSS postprocessor for transformative features such as adding vendor prefixes, and using CSS methodologies for maintainability to overcome the global nature of CSS styles. We didn’t get a chance to dig into a lot of other features CSS has to offer, like advanced selectors, transitions, animations, shapes, dynamic variables — the list goes on and on. There’s a lot of ground to cover with CSS — anyone who says it’s easy probably doesn’t know the half of it!</p>\n\n<p>Modern CSS can definitely be frustrating to work with as it continues to change and evolve at a rapid pace. But it’s important to remember the historical context of how the web has evolved over time, and it’s good to know that there are a lot of smart people out there willing to build concrete tools and methodologies to help CSS best practices evolve right along with the web. It’s an exciting time to be a developer, and I hope this information can serve as a roadmap to help you on your journey!</p>\n\n<p><img src=\"https://res.cloudinary.com/recollectionspace/image/upload/v1566312751/images/b75exdbmzkerz6ltdiep.png\" alt=\"modern-css-dinosaur-10.png\"></p>\n\n<p>Special thanks again to @ryanqnorth’s Dinosaur Comics, which has served up some of the finest absurdist humor since 2003 (when dinosaurs ruled the web).</p>\n"})
UserRecord.create!({record_id: 45, name: "(500) Days of Summer", description: "Tom, greeting-card writer and hopeless romantic, is caught completely off-guard when his girlfriend, Summer, suddenly dumps him. He reflects on their 500 days together to try to figure out where their love affair went sour, and in doing so, Tom rediscovers his true passions in life.", user_collection_id: 2, x: 4370.11001568385, y: 2010.11214962132, width: 300, height: 450, angle: 0.0, scale: 1.02221137829912, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567004299/records/dogyqte2dutlqubgs6hl.jpg", color: "#a6afb7", zindex: nil, rendered_description: "<p>Tom, greeting-card writer and hopeless romantic, is caught completely off-guard when his girlfriend, Summer, suddenly dumps him. He reflects on their 500 days together to try to figure out where their love affair went sour, and in doing so, Tom rediscovers his true passions in life.</p>\n"})
# UserRecord.create!({record_id: 46, name: "shirt", description: "this is a shirt", user_collection_id: 28, x: 1442.23768731878, y: 1279.29726886139, width: 2282, height: 1730, angle: 0.0, scale: 0.0912168130391846, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567174893/records/veggb7trnrihw3ybklio.png", color: "#97aba2", zindex: nil, rendered_description: "<p>this is a shirt</p>\n"})
# UserRecord.create!({record_id: 52, name: "Sgt. Pepper’s Lonely Hearts Club Band", description: "The Beatles", user_collection_id: 27, x: 6194.99405966673, y: -208.698184027106, width: 1434, height: 1404, angle: 0.0, scale: 0.819357594270725, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567179316/records/q4wi8dbyueoso7t4b3iq.jpg", color: "#64665c", zindex: nil, rendered_description: "<p>The Beatles</p>\n"})
UserRecord.create!({record_id: 32, name: "Avatar", description: "### This is an avatar\r\nhello\r\ncool\r\n\r\n##### A sub header\r\nwhoa!\r\n\r\n![Career-Test.png](https://res.cloudinary.com/recollectionspace/image/upload/v1563988868/images/x6shamhgx5gzibmhw9ch.png)\r\n\r\nthis is something\r\n\r\n* One \r\n* Two\r\n* Three", user_collection_id: 28, x: 1235.28254208099, y: 1269.895138484, width: 600, height: 600, angle: 0.0, scale: 0.197304599412041, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1561315992/records/dfhp9lx4le2tbleukzlr.jpg", color: "#000", zindex: 1, rendered_description: "<h3>This is an avatar</h3>\n\n<p>hello\ncool</p>\n\n<h5>A sub header</h5>\n\n<p>whoa!</p>\n\n<p><img src=\"https://res.cloudinary.com/recollectionspace/image/upload/v1563988868/images/x6shamhgx5gzibmhw9ch.png\" alt=\"Career-Test.png\"></p>\n\n<p>this is something</p>\n\n<ul>\n<li>One </li>\n<li>Two</li>\n<li>Three</li>\n</ul>\n"})
# UserRecord.create!({record_id: 53, name: "Discovery", description: "Daft Punk", user_collection_id: 27, x: 4128.50447507653, y: -253.960149885745, width: 1200, height: 1200, angle: 0.0, scale: 0.579928982214974, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567183591/records/juwjbaf5fyznimr4ehhe.jpg", color: "#22221e", zindex: nil, rendered_description: "<p>Daft Punk</p>\n"})
# UserRecord.create!({record_id: 54, name: "Harry Potter and the Deathly Hallows", description: "", user_collection_id: 3, x: 2116.18083315077, y: 609.481540377514, width: 180, height: 289, angle: 0.0, scale: 1.9038190318824, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1567183703/records/dex6iztlgy3hh4jxcdrj.jpg", color: "#8a7168", zindex: nil, rendered_description: ""})
# UserRecord.create!({record_id: 55, name: "American Gods", description: "", user_collection_id: 3, x: 980.579265374267, y: 1433.92192549803, width: 180, height: 272, angle: 0.0, scale: 1.06970646221239, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1569961095/records/hmaramnbwslui2xct39y.jpg", color: "#353834", zindex: nil, rendered_description: ""})
# UserRecord.create!({record_id: 56, name: "The Catcher in the Rye", description: "", user_collection_id: 3, x: 1613.10682303222, y: 1740.52879504978, width: 180, height: 310, angle: 0.0, scale: 0.937558399657149, border: true, src: "https://res.cloudinary.com/recollectionspace/image/upload/v1569961442/records/sgd2dgt5ptrdqjimlob1.jpg", color: "#5b0906", zindex: nil, rendered_description: ""})
